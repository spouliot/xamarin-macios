<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="MonoTouch.NUnitLite" version="1.0.0.0">
    <attributes>
      <attribute name="System.CLSCompliantAttribute">
        <properties>
          <property name="IsCompliant" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Diagnostics.DebuggableAttribute">
        <properties>
          <property name="IsJITTrackingEnabled" value="IgnoreSymbolStoreSequencePoints" />
          <property name="IsJITOptimizerDisabled" value="IgnoreSymbolStoreSequencePoints" />
          <property name="DebuggingFlags" value="IgnoreSymbolStoreSequencePoints" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyCompanyAttribute">
        <properties>
          <property name="Company" value="NUnit Software" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyConfigurationAttribute">
        <properties>
          <property name="Configuration" value=".NET 4.5" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyCopyrightAttribute">
        <properties>
          <property name="Copyright" value="Copyright 2013, Charlie Poole" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyDescriptionAttribute">
        <properties>
          <property name="Description" value="NUnitLite unit-testing framework" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyFileVersionAttribute">
        <properties>
          <property name="Version" value="1.0.0.0" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyProductAttribute">
        <properties>
          <property name="Product" value="NUnitLite" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyTitleAttribute">
        <properties>
          <property name="Title" value="NUnitLite" />
        </properties>
      </attribute>
      <attribute name="System.Reflection.AssemblyTrademarkAttribute">
        <properties>
          <property name="Trademark" value="NUnitLite" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
        <properties>
          <property name="CompilationRelaxations" value="8" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.CompilerServices.ExtensionAttribute" />
      <attribute name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
        <properties>
          <property name="WrapNonExceptionThrows" value="True" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.InteropServices.ComVisibleAttribute">
        <properties>
          <property name="Value" value="False" />
        </properties>
      </attribute>
      <attribute name="System.Runtime.InteropServices.GuidAttribute">
        <properties>
          <property name="Value" value="0BE367FD-D825-4039-A70B-54A3557170EC" />
        </properties>
      </attribute>
    </attributes>
    <namespaces>
      <namespace name="Mono.Options">
        <classes>
          <class name="OptionException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="optionName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="optionName" position="1" attrib="0" type="System.String" />
                  <parameter name="innerException" position="2" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="OptionName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_OptionName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OptionValueCollection" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.String]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.String]" />
              <interface name="System.Collections.Generic.IList`1[System.String]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsReadOnly" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsReadOnly()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.String" params="System.Int32">
                <methods>
                  <method name="get_Item(System.Int32)" attrib="2534" virtual="true" returntype="System.String">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.Int32, System.String)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="index" position="0" attrib="0" type="System.Int32" />
                      <parameter name="value" position="1" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.String)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Clear()" attrib="486" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(System.String)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CopyTo(System.String[], System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="array" position="0" attrib="0" type="System.String[]" />
                  <parameter name="arrayIndex" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.Generic.IEnumerator`1[System.String]">
                <parameters />
              </method>
              <method name="IndexOf(System.String)" attrib="486" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Insert(System.Int32, System.String)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                  <parameter name="item" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Remove(System.String)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="item" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="RemoveAt(System.Int32)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="index" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ToArray()" attrib="134" returntype="System.String[]">
                <parameters />
              </method>
              <method name="ToList()" attrib="134" returntype="System.Collections.Generic.List`1[System.String]">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="OptionValueType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="None" attrib="32854" fieldtype="Mono.Options.OptionValueType" value="0" />
              <field name="Optional" attrib="32854" fieldtype="Mono.Options.OptionValueType" value="1" />
              <field name="Required" attrib="32854" fieldtype="Mono.Options.OptionValueType" value="2" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="MonoTouch.NUnit">
        <classes>
          <class name="NUnitOutputTextWriter" type="class" base="System.IO.TextWriter" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(MonoTouch.NUnit.UI.BaseTouchRunner, System.IO.TextWriter, NUnitLite.Runner.OutputWriter)" attrib="6278">
                <parameters>
                  <parameter name="runner" position="0" attrib="0" type="MonoTouch.NUnit.UI.BaseTouchRunner" />
                  <parameter name="baseWriter" position="1" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="xmlWriter" position="2" attrib="0" type="NUnitLite.Runner.OutputWriter" />
                </parameters>
              </constructor>
              <constructor name=".ctor(MonoTouch.NUnit.UI.BaseTouchRunner, System.IO.TextWriter, NUnitLite.Runner.OutputWriter, MonoTouch.NUnit.UI.XmlMode)" attrib="6278">
                <parameters>
                  <parameter name="runner" position="0" attrib="0" type="MonoTouch.NUnit.UI.BaseTouchRunner" />
                  <parameter name="baseWriter" position="1" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="xmlWriter" position="2" attrib="0" type="NUnitLite.Runner.OutputWriter" />
                  <parameter name="xmlMode" position="3" attrib="0" type="MonoTouch.NUnit.UI.XmlMode" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="BaseWriter" attrib="0" ptype="System.IO.TextWriter">
                <methods>
                  <method name="get_BaseWriter()" attrib="2182" returntype="System.IO.TextWriter">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Encoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_Encoding()" attrib="2246" virtual="true" is-override="true" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Runner" attrib="0" ptype="MonoTouch.NUnit.UI.BaseTouchRunner">
                <methods>
                  <method name="get_Runner()" attrib="2182" returntype="MonoTouch.NUnit.UI.BaseTouchRunner">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="XmlOutputWriter" attrib="0" ptype="NUnitLite.Runner.OutputWriter">
                <methods>
                  <method name="get_XmlOutputWriter()" attrib="2182" returntype="NUnitLite.Runner.OutputWriter">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Write(System.Char)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="Write(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TcpTextWriter" type="class" base="System.IO.TextWriter" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="hostName" position="0" attrib="0" type="System.String" />
                  <parameter name="port" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Encoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_Encoding()" attrib="2246" virtual="true" is-override="true" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HostName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HostName()" attrib="2182" returntype="System.String">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Port" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Port()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Close()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Dispose(System.Boolean)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="disposing" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Flush()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Write(System.Char)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="Write(System.Char[])" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Char[]" />
                </parameters>
              </method>
              <method name="Write(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Write(System.Char[], System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="buffer" position="0" attrib="0" type="System.Char[]" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="WriteLine()" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="MonoTouch.NUnit.UI">
        <classes>
          <class name="BaseTouchRunner" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestListener" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AutoStart" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AutoStart()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_AutoStart(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="FailedCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FailedCount()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Filter" attrib="0" ptype="NUnit.Framework.Api.ITestFilter">
                <methods>
                  <method name="get_Filter()" attrib="2182" returntype="NUnit.Framework.Api.ITestFilter">
                    <parameters />
                  </method>
                  <method name="set_Filter(NUnit.Framework.Api.ITestFilter)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IgnoredCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_IgnoredCount()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InconclusiveCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InconclusiveCount()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LoadedTest" attrib="0" ptype="NUnit.Framework.Api.ITest">
                <methods>
                  <method name="get_LoadedTest()" attrib="2182" returntype="NUnit.Framework.Api.ITest">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PassedCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_PassedCount()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Result" attrib="0" ptype="NUnit.Framework.Internal.TestResult">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="NUnit.Framework.Internal.TestResult">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_Result(NUnit.Framework.Internal.TestResult)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.Internal.TestResult" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Suite" attrib="0" ptype="NUnit.Framework.Internal.TestSuite">
                <methods>
                  <method name="get_Suite()" attrib="2182" returntype="NUnit.Framework.Internal.TestSuite">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TerminateAfterExecution" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TerminateAfterExecution()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_TerminateAfterExecution(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TestCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_TestCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Writer" attrib="0" ptype="System.IO.TextWriter">
                <methods>
                  <method name="get_Writer()" attrib="2182" returntype="System.IO.TextWriter">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_Writer(System.IO.TextWriter)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.IO.TextWriter" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.Reflection.Assembly)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                </parameters>
              </method>
              <method name="Add(System.Reflection.Assembly, System.Collections.Generic.IList`1[System.String])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                  <parameter name="fixtures" position="1" attrib="0" type="System.Collections.Generic.IList`1[System.String]" />
                </parameters>
              </method>
              <method name="AutoRun()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="CloseWriter()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="ExecuteOnMainThread(System.Action)" attrib="452" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Action" />
                </parameters>
              </method>
              <method name="Load(System.Reflection.Assembly, System.Collections.IDictionary)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                  <parameter name="settings" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="Load(System.String, System.Collections.IDictionary)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="assemblyName" position="0" attrib="0" type="System.String" />
                  <parameter name="settings" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="LoadSync()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="OpenWriter(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Run()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Run(NUnit.Framework.Internal.Test)" attrib="134" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
              <method name="TerminateWithSuccess()" attrib="452" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="TestFinished(NUnit.Framework.Api.ITestResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="r" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                </parameters>
              </method>
              <method name="TestOutput(NUnit.Framework.Api.TestOutput)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="testOutput" position="0" attrib="0" type="NUnit.Framework.Api.TestOutput" />
                </parameters>
              </method>
              <method name="TestStarted(NUnit.Framework.Api.ITest)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
              <method name="WriteDeviceInformation(System.IO.TextWriter)" attrib="1476" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ConsoleRunner" type="class" base="MonoTouch.NUnit.UI.BaseTouchRunner" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestListener" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="WriteDeviceInformation(System.IO.TextWriter)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TouchOptions" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="Current" attrib="22" fieldtype="MonoTouch.NUnit.UI.TouchOptions" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="AutoStart" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AutoStart()" attrib="2182" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_AutoStart(System.Boolean)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="EnableXml" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_EnableXml()" attrib="2182" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_EnableXml(System.Boolean)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HostName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HostName()" attrib="2182" returntype="System.String">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HostPort" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_HostPort()" attrib="2182" returntype="System.Int32">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LogFile" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_LogFile()" attrib="2182" returntype="System.String">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_LogFile(System.String)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ShowUseNetworkLogger" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ShowUseNetworkLogger()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SortNames" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_SortNames()" attrib="2182" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_SortNames(System.Boolean)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TerminateAfterExecution" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TerminateAfterExecution()" attrib="2182" returntype="System.Boolean">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_TerminateAfterExecution(System.Boolean)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Transport" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Transport()" attrib="2182" returntype="System.String">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_Transport(System.String)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="XmlMode" attrib="0" ptype="MonoTouch.NUnit.UI.XmlMode">
                <methods>
                  <method name="get_XmlMode()" attrib="2182" returntype="MonoTouch.NUnit.UI.XmlMode">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters />
                  </method>
                  <method name="set_XmlMode(MonoTouch.NUnit.UI.XmlMode)" attrib="2182" returntype="System.Void">
                    <attributes>
                      <attribute name="System.Runtime.CompilerServices.CompilerGeneratedAttribute" />
                    </attributes>
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="MonoTouch.NUnit.UI.XmlMode" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetViewController()" attrib="134" returntype="UIKit.UIViewController">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TouchRunner" type="class" base="MonoTouch.NUnit.UI.BaseTouchRunner" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestListener" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(UIKit.UIWindow)" attrib="6278">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="window" position="0" attrib="0" type="UIKit.UIWindow" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="NavigationController" attrib="0" ptype="UIKit.UINavigationController">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_NavigationController()" attrib="2182" returntype="UIKit.UINavigationController">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ExecuteOnMainThread(System.Action)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="action" position="0" attrib="0" type="System.Action" />
                </parameters>
              </method>
              <method name="GetViewController()" attrib="134" returntype="UIKit.UIViewController">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters />
              </method>
              <method name="Show(NUnit.Framework.Internal.TestSuite)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="suite" position="0" attrib="0" type="NUnit.Framework.Internal.TestSuite" />
                </parameters>
              </method>
              <method name="TerminateWithSuccess()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="TestFinished(NUnit.Framework.Api.ITestResult)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="r" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                </parameters>
              </method>
              <method name="WriteDeviceInformation(System.IO.TextWriter)" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TouchViewController" type="class" base="MonoTouch.Dialog.DialogViewController" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.CLSCompliantAttribute">
                <properties>
                  <property name="IsCompliant" value="False" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="Foundation.INSCoding" />
              <interface name="Foundation.INSExtensionRequestHandling" />
              <interface name="Foundation.INSObjectProtocol" />
              <interface name="ObjCRuntime.INativeObject" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.IDisposable" />
              <interface name="System.IEquatable`1[Foundation.NSObject]" />
              <interface name="UIKit.IUIAppearanceContainer" />
              <interface name="UIKit.IUIContentContainer" />
              <interface name="UIKit.IUIFocusEnvironment" />
              <interface name="UIKit.IUIScrollViewDelegate" />
              <interface name="UIKit.IUITableViewDataSource" />
              <interface name="UIKit.IUITableViewDelegate" />
              <interface name="UIKit.IUITraitEnvironment" />
              <interface name="UIKit.IUIUserActivityRestoring" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(MonoTouch.Dialog.RootElement)" attrib="6278">
                <parameters>
                  <parameter name="root" position="0" attrib="0" type="MonoTouch.Dialog.RootElement" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Filter()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="XmlMode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Default" attrib="32854" fieldtype="MonoTouch.NUnit.UI.XmlMode" value="0" />
              <field name="Wrapped" attrib="32854" fieldtype="MonoTouch.NUnit.UI.XmlMode" value="1" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit">
        <classes>
          <class name="Env" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="DocumentFolder" attrib="22" fieldtype="System.String" />
              <field name="NewLine" attrib="54" fieldtype="System.String" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="ObjectList" type="class" base="System.Collections.Generic.List`1[System.Object]" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="AddRange(System.Collections.ICollection)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit.Framework">
        <classes>
          <class name="Assert" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="AreEqual(System.Decimal, System.Decimal)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Decimal" />
                  <parameter name="actual" position="1" attrib="0" type="System.Decimal" />
                </parameters>
              </method>
              <method name="AreEqual(System.Int32, System.Int32)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int32" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AreEqual(System.Int64, System.Int64)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int64" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="AreEqual(System.Object, System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AreEqual(System.UInt32, System.UInt32)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt32" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt32" />
                </parameters>
              </method>
              <method name="AreEqual(System.UInt64, System.UInt64)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt64" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt64" />
                </parameters>
              </method>
              <method name="AreEqual(System.Decimal, System.Decimal, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Decimal" />
                  <parameter name="actual" position="1" attrib="0" type="System.Decimal" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreEqual(System.Double, System.Double, System.Double)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Double" />
                  <parameter name="delta" position="2" attrib="0" type="System.Double" />
                </parameters>
              </method>
              <method name="AreEqual(System.Double, System.Nullable`1[System.Double], System.Double)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Nullable`1[System.Double]" />
                  <parameter name="delta" position="2" attrib="0" type="System.Double" />
                </parameters>
              </method>
              <method name="AreEqual(System.Int32, System.Int32, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int32" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreEqual(System.Int64, System.Int64, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int64" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int64" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreEqual(System.Object, System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreEqual(System.UInt32, System.UInt32, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt32" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreEqual(System.UInt64, System.UInt64, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt64" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt64" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreEqual(System.Decimal, System.Decimal, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Decimal" />
                  <parameter name="actual" position="1" attrib="0" type="System.Decimal" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreEqual(System.Double, System.Double, System.Double, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Double" />
                  <parameter name="delta" position="2" attrib="0" type="System.Double" />
                  <parameter name="message" position="3" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreEqual(System.Double, System.Nullable`1[System.Double], System.Double, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Nullable`1[System.Double]" />
                  <parameter name="delta" position="2" attrib="0" type="System.Double" />
                  <parameter name="message" position="3" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreEqual(System.Int32, System.Int32, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int32" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreEqual(System.Int64, System.Int64, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int64" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int64" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreEqual(System.Object, System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreEqual(System.UInt32, System.UInt32, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt32" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreEqual(System.UInt64, System.UInt64, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt64" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt64" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreEqual(System.Double, System.Double, System.Double, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Double" />
                  <parameter name="delta" position="2" attrib="0" type="System.Double" />
                  <parameter name="message" position="3" attrib="0" type="System.String" />
                  <parameter name="args" position="4" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreEqual(System.Double, System.Nullable`1[System.Double], System.Double, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Nullable`1[System.Double]" />
                  <parameter name="delta" position="2" attrib="0" type="System.Double" />
                  <parameter name="message" position="3" attrib="0" type="System.String" />
                  <parameter name="args" position="4" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreNotEqual(System.Decimal, System.Decimal)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Decimal" />
                  <parameter name="actual" position="1" attrib="0" type="System.Decimal" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Double, System.Double)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Double" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Int32, System.Int32)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int32" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Int64, System.Int64)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int64" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Object, System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Single, System.Single)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Single" />
                  <parameter name="actual" position="1" attrib="0" type="System.Single" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.UInt32, System.UInt32)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt32" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt32" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.UInt64, System.UInt64)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt64" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt64" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Decimal, System.Decimal, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Decimal" />
                  <parameter name="actual" position="1" attrib="0" type="System.Decimal" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Double, System.Double, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Double" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Int32, System.Int32, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int32" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Int64, System.Int64, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int64" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int64" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Object, System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Single, System.Single, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Single" />
                  <parameter name="actual" position="1" attrib="0" type="System.Single" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.UInt32, System.UInt32, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt32" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.UInt64, System.UInt64, System.String)" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt64" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt64" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreNotEqual(System.Decimal, System.Decimal, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Decimal" />
                  <parameter name="actual" position="1" attrib="0" type="System.Decimal" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreNotEqual(System.Double, System.Double, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Double" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreNotEqual(System.Int32, System.Int32, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int32" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreNotEqual(System.Int64, System.Int64, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Int64" />
                  <parameter name="actual" position="1" attrib="0" type="System.Int64" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreNotEqual(System.Object, System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreNotEqual(System.Single, System.Single, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Single" />
                  <parameter name="actual" position="1" attrib="0" type="System.Single" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreNotEqual(System.UInt32, System.UInt32, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt32" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt32" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreNotEqual(System.UInt64, System.UInt64, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.UInt64" />
                  <parameter name="actual" position="1" attrib="0" type="System.UInt64" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreNotSame(System.Object, System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AreNotSame(System.Object, System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreNotSame(System.Object, System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AreSame(System.Object, System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AreSame(System.Object, System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AreSame(System.Object, System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="AssertDoublesAreEqual(System.Double, System.Double, System.Double, System.String, System.Object[])" attrib="148" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Double" />
                  <parameter name="actual" position="1" attrib="0" type="System.Double" />
                  <parameter name="delta" position="2" attrib="0" type="System.Double" />
                  <parameter name="message" position="3" attrib="0" type="System.String" />
                  <parameter name="args" position="4" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="ByVal(System.Object, NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
              </method>
              <method name="ByVal(System.Object, NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ByVal(System.Object, NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Catch(NUnit.Framework.TestDelegate)" attrib="150" static="true" returntype="T">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Exception" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Catch(NUnit.Framework.TestDelegate)" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                </parameters>
              </method>
              <method name="Catch(NUnit.Framework.TestDelegate, System.String)" attrib="150" static="true" returntype="T">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Exception" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Catch(NUnit.Framework.TestDelegate, System.String)" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Catch(System.Type, NUnit.Framework.TestDelegate)" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="expectedExceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="code" position="1" attrib="0" type="NUnit.Framework.TestDelegate" />
                </parameters>
              </method>
              <method name="Catch(NUnit.Framework.TestDelegate, System.String, System.Object[])" attrib="150" static="true" returntype="T">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Exception" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Catch(NUnit.Framework.TestDelegate, System.String, System.Object[])" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Catch(System.Type, NUnit.Framework.TestDelegate, System.String)" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="expectedExceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="code" position="1" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Catch(System.Type, NUnit.Framework.TestDelegate, System.String, System.Object[])" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="expectedExceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="code" position="1" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="DoesNotThrow(NUnit.Framework.TestDelegate)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                </parameters>
              </method>
              <method name="DoesNotThrow(NUnit.Framework.TestDelegate, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DoesNotThrow(NUnit.Framework.TestDelegate, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Equals(System.Object, System.Object)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="a" position="0" attrib="0" type="System.Object" />
                  <parameter name="b" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Fail()" attrib="150" static="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Fail(System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Fail(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="False(System.Boolean)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="False(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="False(System.Boolean, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Ignore()" attrib="150" static="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Ignore(System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Ignore(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Inconclusive()" attrib="150" static="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Inconclusive(System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Inconclusive(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsFalse(System.Boolean)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="IsFalse(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsFalse(System.Boolean, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsInstanceOfType(System.Type, System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Type" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="IsInstanceOfType(System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsInstanceOfType(System.Type, System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Type" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsInstanceOfType(System.Type, System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Type" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsNotNull(System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="IsNotNull(System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsNotNull(System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsNull(System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="IsNull(System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsNull(System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="IsTrue(System.Boolean)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="IsTrue(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsTrue(System.Boolean, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="NotNull(System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="NotNull(System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="NotNull(System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Null(System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Null(System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Null(System.Object, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="anObject" position="0" attrib="0" type="System.Object" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Pass()" attrib="150" static="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="Pass(System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Pass(System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="ReferenceEquals(System.Object, System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="a" position="0" attrib="0" type="System.Object" />
                  <parameter name="b" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="That(System.Boolean)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="That(NUnit.Framework.Constraints.ActualValueDelegate`1[T], NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                  <parameter name="expr" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(NUnit.Framework.TestDelegate, NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="constraint" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
              </method>
              <method name="That(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="That(System.Object, NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
              </method>
              <method name="That(T&amp;, NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(NUnit.Framework.Constraints.ActualValueDelegate`1[T], NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                  <parameter name="expr" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(System.Boolean, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="That(System.Object, NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="That(T&amp;, NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(NUnit.Framework.Constraints.ActualValueDelegate`1[T], NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                  <parameter name="expr" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(System.Object, NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="That(T&amp;, NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Throws(NUnit.Framework.TestDelegate)" attrib="150" static="true" returntype="T">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Exception" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Throws(NUnit.Framework.Constraints.IResolveConstraint, NUnit.Framework.TestDelegate)" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="code" position="1" attrib="0" type="NUnit.Framework.TestDelegate" />
                </parameters>
              </method>
              <method name="Throws(NUnit.Framework.TestDelegate, System.String)" attrib="150" static="true" returntype="T">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Exception" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Throws(System.Type, NUnit.Framework.TestDelegate)" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="expectedExceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="code" position="1" attrib="0" type="NUnit.Framework.TestDelegate" />
                </parameters>
              </method>
              <method name="Throws(NUnit.Framework.Constraints.IResolveConstraint, NUnit.Framework.TestDelegate, System.String)" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="code" position="1" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Throws(NUnit.Framework.TestDelegate, System.String, System.Object[])" attrib="150" static="true" returntype="T">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.Exception" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="Throws(System.Type, NUnit.Framework.TestDelegate, System.String)" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="expectedExceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="code" position="1" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Throws(NUnit.Framework.Constraints.IResolveConstraint, NUnit.Framework.TestDelegate, System.String, System.Object[])" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="expression" position="0" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="code" position="1" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Throws(System.Type, NUnit.Framework.TestDelegate, System.String, System.Object[])" attrib="150" static="true" returntype="System.Exception">
                <parameters>
                  <parameter name="expectedExceptionType" position="0" attrib="0" type="System.Type" />
                  <parameter name="code" position="1" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="True(System.Boolean)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="True(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="True(System.Boolean, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AssertionException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="inner" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="AssertionHelper" type="class" base="NUnit.Framework.Constraints.ConstraintFactory" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Expect(System.Boolean)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Expect(NUnit.Framework.Constraints.ActualValueDelegate`1[T], NUnit.Framework.Constraints.IResolveConstraint)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                  <parameter name="expr" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Expect(NUnit.Framework.TestDelegate, NUnit.Framework.Constraints.IResolveConstraint)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="constraint" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
              </method>
              <method name="Expect(System.Boolean, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Expect(T&amp;, NUnit.Framework.Constraints.IResolveConstraint)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Expect(T, NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Expect(NUnit.Framework.Constraints.ActualValueDelegate`1[T], NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                  <parameter name="expr" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Expect(System.Boolean, System.String, System.Object[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="Expect(T&amp;, NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Expect(T, NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Expect(NUnit.Framework.Constraints.ActualValueDelegate`1[T], NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                  <parameter name="expr" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Expect(T&amp;, NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Expect(T, NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Map(System.Collections.ICollection)" attrib="134" returntype="NUnit.Framework.ListMapper">
                <parameters>
                  <parameter name="original" position="0" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Assume" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Equals(System.Object, System.Object)" attrib="150" static="true" returntype="System.Boolean">
                <attributes>
                  <attribute name="System.ComponentModel.EditorBrowsableAttribute">
                    <properties>
                      <property name="State" value="Never" />
                    </properties>
                  </attribute>
                </attributes>
                <parameters>
                  <parameter name="a" position="0" attrib="0" type="System.Object" />
                  <parameter name="b" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ReferenceEquals(System.Object, System.Object)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="a" position="0" attrib="0" type="System.Object" />
                  <parameter name="b" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="That(System.Boolean)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="That(NUnit.Framework.Constraints.ActualValueDelegate`1[T], NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                  <parameter name="expr" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(NUnit.Framework.TestDelegate, NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="code" position="0" attrib="0" type="NUnit.Framework.TestDelegate" />
                  <parameter name="constraint" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
              </method>
              <method name="That(System.Boolean, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="That(System.Object, NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
              </method>
              <method name="That(T&amp;, NUnit.Framework.Constraints.IResolveConstraint)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(NUnit.Framework.Constraints.ActualValueDelegate`1[T], NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                  <parameter name="expr" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(System.Boolean, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="condition" position="0" attrib="0" type="System.Boolean" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="That(System.Object, NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="That(T&amp;, NUnit.Framework.Constraints.IResolveConstraint, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(NUnit.Framework.Constraints.ActualValueDelegate`1[T], NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                  <parameter name="expr" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="That(System.Object, NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="That(T&amp;, NUnit.Framework.Constraints.IResolveConstraint, System.String, System.Object[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                  <parameter name="expression" position="1" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                  <parameter name="message" position="2" attrib="0" type="System.String" />
                  <parameter name="args" position="3" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="CategoryAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <fields>
              <field name="categoryName" attrib="4" fieldtype="System.String" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CombinatorialAttribute" type="class" base="NUnit.Framework.PropertyAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="Contains" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Item(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.CollectionContainsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Substring(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.SubstringConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CultureAttribute" type="class" base="NUnit.Framework.IncludeExcludeAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="cultures" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
              <method name="IsCultureSupported(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="culture" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsCultureSupported(System.String[])" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="cultures" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DataAttribute" type="class" base="NUnit.Framework.NUnitAttribute" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="DatapointAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Field" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="DatapointSourceAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Field, Property, Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="DatapointsAttribute" type="class" base="NUnit.Framework.DatapointSourceAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Field, Property, Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="DescriptionAttribute" type="class" base="NUnit.Framework.PropertyAttribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="description" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="ExpectedExceptionAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="exceptionName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="exceptionType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ExceptionData" attrib="0" ptype="NUnit.Framework.Api.ExpectedExceptionData">
                <methods>
                  <method name="get_ExceptionData()" attrib="2182" returntype="NUnit.Framework.Api.ExpectedExceptionData">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExpectedException" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ExpectedException()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                  <method name="set_ExpectedException(System.Type)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Type" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExpectedExceptionName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExpectedExceptionName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ExpectedExceptionName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExpectedMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExpectedMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ExpectedMessage(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Handler" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Handler()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Handler(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MatchType" attrib="0" ptype="NUnit.Framework.MessageMatch">
                <methods>
                  <method name="get_MatchType()" attrib="2182" returntype="NUnit.Framework.MessageMatch">
                    <parameters />
                  </method>
                  <method name="set_MatchType(NUnit.Framework.MessageMatch)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.MessageMatch" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UserMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_UserMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_UserMessage(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ExpectedExceptionDecorator" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Internal.Commands.ICommandDecorator" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Api.ExpectedExceptionData)" attrib="6278">
                <parameters>
                  <parameter name="exceptionData" position="0" attrib="0" type="NUnit.Framework.Api.ExpectedExceptionData" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="ExplicitAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="reason" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="GlobalSettings" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="DefaultFloatingPointTolerance" attrib="22" fieldtype="System.Double" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="Guard" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ArgumentNotNull(System.Object, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Object" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ArgumentNotNullOrEmpty(System.String, System.String)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Has" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="All" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_All()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Count()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InnerException" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_InnerException()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Length()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Message" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Message()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="No" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_No()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="None" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_None()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Some" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_Some()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Attribute()" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Attribute(System.Type)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Exactly(System.Int32)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                <parameters>
                  <parameter name="expectedCount" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="Member(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.CollectionContainsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Property(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IExpectException" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="HandleException(System.Exception)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="ex" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IgnoreAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="reason" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IgnoreException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="inner" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="IncludeExcludeAttribute" type="class" base="NUnit.Framework.NUnitAttribute" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="include" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Exclude" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Exclude()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Exclude(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Include" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Include()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Include(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Reason" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Reason()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Reason(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="InconclusiveException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="inner" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="Is" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="All" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_All()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BinarySerializable" attrib="0" ptype="NUnit.Framework.Constraints.BinarySerializableConstraint">
                <methods>
                  <method name="get_BinarySerializable()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.BinarySerializableConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Empty" attrib="0" ptype="NUnit.Framework.Constraints.EmptyConstraint">
                <methods>
                  <method name="get_Empty()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.EmptyConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="False" attrib="0" ptype="NUnit.Framework.Constraints.FalseConstraint">
                <methods>
                  <method name="get_False()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.FalseConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NaN" attrib="0" ptype="NUnit.Framework.Constraints.NaNConstraint">
                <methods>
                  <method name="get_NaN()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.NaNConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Negative" attrib="0" ptype="NUnit.Framework.Constraints.LessThanConstraint">
                <methods>
                  <method name="get_Negative()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.LessThanConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Not" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_Not()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Null" attrib="0" ptype="NUnit.Framework.Constraints.NullConstraint">
                <methods>
                  <method name="get_Null()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.NullConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Ordered" attrib="0" ptype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                <methods>
                  <method name="get_Ordered()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Positive" attrib="0" ptype="NUnit.Framework.Constraints.GreaterThanConstraint">
                <methods>
                  <method name="get_Positive()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.GreaterThanConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="True" attrib="0" ptype="NUnit.Framework.Constraints.TrueConstraint">
                <methods>
                  <method name="get_True()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.TrueConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Unique" attrib="0" ptype="NUnit.Framework.Constraints.UniqueItemsConstraint">
                <methods>
                  <method name="get_Unique()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.UniqueItemsConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="XmlSerializable" attrib="0" ptype="NUnit.Framework.Constraints.XmlSerializableConstraint">
                <methods>
                  <method name="get_XmlSerializable()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.XmlSerializableConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AssignableFrom()" attrib="150" static="true" returntype="NUnit.Framework.Constraints.AssignableFromConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AssignableFrom(System.Type)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.AssignableFromConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="AssignableTo()" attrib="150" static="true" returntype="NUnit.Framework.Constraints.AssignableToConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AssignableTo(System.Type)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.AssignableToConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="AtLeast(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AtMost(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.LessThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EqualTo(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.EqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EquivalentTo(System.Collections.IEnumerable)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.CollectionEquivalentConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="GreaterThan(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.GreaterThanConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GreaterThanOrEqualTo(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="InRange(T, T)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.RangeConstraint`1[T]">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="T" />
                  <parameter name="to" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.IComparable`1[T]" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="InstanceOf()" attrib="150" static="true" returntype="NUnit.Framework.Constraints.InstanceOfTypeConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InstanceOf(System.Type)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.InstanceOfTypeConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="LessThan(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.LessThanConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="LessThanOrEqualTo(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.LessThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SameAs(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.SameAsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SamePath(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.SamePathConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SamePathOrUnder(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.SamePathOrUnderConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringContaining(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.SubstringConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringEnding(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.EndsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringMatching(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.RegexConstraint">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringStarting(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.StartsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SubPath(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.SubPathConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SubsetOf(System.Collections.IEnumerable)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.CollectionSubsetConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="TypeOf()" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TypeOf(System.Type)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Iz" type="class" base="NUnit.Framework.Is" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="ListMapper" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Collections.ICollection)" attrib="6278">
                <parameters>
                  <parameter name="original" position="0" attrib="0" type="System.Collections.ICollection" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Property(System.String)" attrib="134" returntype="System.Collections.ICollection">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MaxTimeAttribute" type="class" base="NUnit.Framework.PropertyAttribute" sealed="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.Commands.ICommandDecorator" />
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="milliseconds" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="MessageMatch" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Contains" attrib="32854" fieldtype="NUnit.Framework.MessageMatch" value="1" />
              <field name="Exact" attrib="32854" fieldtype="NUnit.Framework.MessageMatch" value="0" />
              <field name="Regex" attrib="32854" fieldtype="NUnit.Framework.MessageMatch" value="2" />
              <field name="StartsWith" attrib="32854" fieldtype="NUnit.Framework.MessageMatch" value="3" />
            </fields>
          </class>
          <class name="NUnitAttribute" type="class" base="System.Attribute" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="PairwiseAttribute" type="class" base="NUnit.Framework.PropertyAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="PlatformAttribute" type="class" base="NUnit.Framework.IncludeExcludeAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="platforms" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PostTestAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="PreTestAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="PropertyAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Object)" attrib="6276">
                <parameters>
                  <parameter name="propertyValue" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Double)" attrib="6278">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                  <parameter name="propertyValue" position="1" attrib="0" type="System.Double" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                  <parameter name="propertyValue" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                  <parameter name="propertyValue" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Properties" attrib="0" ptype="NUnit.Framework.Api.IPropertyBag">
                <methods>
                  <method name="get_Properties()" attrib="2182" returntype="NUnit.Framework.Api.IPropertyBag">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RandomAttribute" type="class" base="NUnit.Framework.ValuesAttribute" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.IParameterDataSource" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Double, System.Double, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="min" position="0" attrib="0" type="System.Double" />
                  <parameter name="max" position="1" attrib="0" type="System.Double" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="min" position="0" attrib="0" type="System.Int32" />
                  <parameter name="max" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetData(System.Reflection.ParameterInfo)" attrib="486" virtual="true" returntype="System.Collections.IEnumerable">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RangeAttribute" type="class" base="NUnit.Framework.ValuesAttribute" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.IParameterDataSource" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.Int32" />
                  <parameter name="to" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Double, System.Double, System.Double)" attrib="6278">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.Double" />
                  <parameter name="to" position="1" attrib="0" type="System.Double" />
                  <parameter name="step" position="2" attrib="0" type="System.Double" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int32, System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.Int32" />
                  <parameter name="to" position="1" attrib="0" type="System.Int32" />
                  <parameter name="step" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Int64, System.Int64, System.Int64)" attrib="6278">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.Int64" />
                  <parameter name="to" position="1" attrib="0" type="System.Int64" />
                  <parameter name="step" position="2" attrib="0" type="System.Int64" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Single, System.Single, System.Single)" attrib="6278">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="System.Single" />
                  <parameter name="to" position="1" attrib="0" type="System.Single" />
                  <parameter name="step" position="2" attrib="0" type="System.Single" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="SequentialAttribute" type="class" base="NUnit.Framework.PropertyAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="SetCultureAttribute" type="class" base="NUnit.Framework.PropertyAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToContext" />
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="culture" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="SetUICultureAttribute" type="class" base="NUnit.Framework.PropertyAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToContext" />
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="culture" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="SetUpAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="SpecialValue" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Null" attrib="32854" fieldtype="NUnit.Framework.SpecialValue" value="0" />
            </fields>
          </class>
          <class name="SuccessException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="inner" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="TearDownAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="TestAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Description(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestCaseAttribute" type="class" base="NUnit.Framework.DataAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestCaseData" />
              <interface name="NUnit.Framework.Api.ITestCaseSource" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object[])" attrib="6278">
                <parameters>
                  <parameter name="arguments" position="0" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="System.Object" />
                  <parameter name="arg2" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object, System.Object, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="System.Object" />
                  <parameter name="arg2" position="1" attrib="0" type="System.Object" />
                  <parameter name="arg3" position="2" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Object[]">
                <methods>
                  <method name="get_Arguments()" attrib="2534" virtual="true" returntype="System.Object[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Categories" attrib="0" ptype="System.Collections.IList">
                <methods>
                  <method name="get_Categories()" attrib="2182" returntype="System.Collections.IList">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Category" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Category()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Category(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Description(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExceptionData" attrib="0" ptype="NUnit.Framework.Api.ExpectedExceptionData">
                <methods>
                  <method name="get_ExceptionData()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.ExpectedExceptionData">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExpectedException" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ExpectedException()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                  <method name="set_ExpectedException(System.Type)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Type" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExpectedExceptionName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExpectedExceptionName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ExpectedExceptionName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExpectedMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExpectedMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ExpectedMessage(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExpectedResult" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_ExpectedResult()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_ExpectedResult(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Explicit" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Explicit()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Explicit(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HasExpectedResult" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasExpectedResult()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Ignore" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Ignore()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Ignore(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IgnoreReason" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_IgnoreReason()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_IgnoreReason(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MatchType" attrib="0" ptype="NUnit.Framework.MessageMatch">
                <methods>
                  <method name="get_MatchType()" attrib="2182" returntype="NUnit.Framework.MessageMatch">
                    <parameters />
                  </method>
                  <method name="set_MatchType(NUnit.Framework.MessageMatch)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.MessageMatch" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Properties" attrib="0" ptype="NUnit.Framework.Api.IPropertyBag">
                <methods>
                  <method name="get_Properties()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.IPropertyBag">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Reason" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Reason()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Reason(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Result" attrib="0" ptype="System.Object">
                <attributes>
                  <attribute name="System.ObsoleteAttribute">
                    <properties>
                      <property name="Message" value="Use ExpectedResult" />
                    </properties>
                  </attribute>
                </attributes>
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_Result(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RunState" attrib="0" ptype="NUnit.Framework.Api.RunState">
                <methods>
                  <method name="get_RunState()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.RunState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TestName()" attrib="2534" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_TestName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetTestCasesFor(System.Reflection.MethodInfo)" attrib="486" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestCaseData" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestCaseData" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object[])" attrib="6278">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="System.Object" />
                  <parameter name="arg2" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object, System.Object, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="System.Object" />
                  <parameter name="arg2" position="1" attrib="0" type="System.Object" />
                  <parameter name="arg3" position="2" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Object[]">
                <methods>
                  <method name="get_Arguments()" attrib="2534" virtual="true" returntype="System.Object[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExceptionData" attrib="0" ptype="NUnit.Framework.Api.ExpectedExceptionData">
                <methods>
                  <method name="get_ExceptionData()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.ExpectedExceptionData">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExpectedException" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ExpectedException()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExpectedExceptionMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExpectedExceptionMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExpectedExceptionName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExpectedExceptionName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExpectedResult" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_ExpectedResult()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_ExpectedResult(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HasExpectedResult" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasExpectedResult()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_HasExpectedResult(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MatchType" attrib="0" ptype="NUnit.Framework.MessageMatch">
                <methods>
                  <method name="get_MatchType()" attrib="2182" returntype="NUnit.Framework.MessageMatch">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Properties" attrib="0" ptype="NUnit.Framework.Api.IPropertyBag">
                <methods>
                  <method name="get_Properties()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.IPropertyBag">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Result" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RunState" attrib="0" ptype="NUnit.Framework.Api.RunState">
                <methods>
                  <method name="get_RunState()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.RunState">
                    <parameters />
                  </method>
                  <method name="set_RunState(NUnit.Framework.Api.RunState)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.Api.RunState" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TestName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TestName()" attrib="2534" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_TestName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Explicit()" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters />
              </method>
              <method name="Explicit(System.String)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="reason" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Ignore()" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters />
              </method>
              <method name="Ignore(System.String)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="reason" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Returns(System.Object)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SetCategory(System.String)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="category" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SetDescription(System.String)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="description" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SetName(System.String)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SetProperty(System.String, System.Double)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="propName" position="0" attrib="0" type="System.String" />
                  <parameter name="propValue" position="1" attrib="0" type="System.Double" />
                </parameters>
              </method>
              <method name="SetProperty(System.String, System.Int32)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="propName" position="0" attrib="0" type="System.String" />
                  <parameter name="propValue" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="SetProperty(System.String, System.String)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="propName" position="0" attrib="0" type="System.String" />
                  <parameter name="propValue" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Throws(System.String)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="exceptionName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Throws(System.Type)" attrib="134" returntype="NUnit.Framework.TestCaseData">
                <parameters>
                  <parameter name="exceptionType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestCaseSourceAttribute" type="class" base="NUnit.Framework.DataAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestCaseSource" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="sourceName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="sourceType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.String)" attrib="6278">
                <parameters>
                  <parameter name="sourceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="sourceName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Category" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Category()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Category(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="SourceName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SourceName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SourceType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_SourceType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetTestCasesFor(System.Reflection.MethodInfo)" attrib="486" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestContext" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.TestExecutionContext)" attrib="6278">
                <parameters>
                  <parameter name="ec" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CurrentContext" attrib="0" ptype="NUnit.Framework.TestContext">
                <methods>
                  <method name="get_CurrentContext()" attrib="2198" static="true" returntype="NUnit.Framework.TestContext">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Random" attrib="0" ptype="NUnit.Framework.Internal.RandomGenerator">
                <methods>
                  <method name="get_Random()" attrib="2182" returntype="NUnit.Framework.Internal.RandomGenerator">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Result" attrib="0" ptype="NUnit.Framework.TestContext+ResultAdapter">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="NUnit.Framework.TestContext+ResultAdapter">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Test" attrib="0" ptype="NUnit.Framework.TestContext+TestAdapter">
                <methods>
                  <method name="get_Test()" attrib="2182" returntype="NUnit.Framework.TestContext+TestAdapter">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestDirectory" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TestDirectory()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="WorkDirectory" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_WorkDirectory()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <classes>
              <class name="ResultAdapter" type="class" base="System.Object" charset="Ansi" layout="Auto">
                <constructors>
                  <constructor name=".ctor(NUnit.Framework.Internal.TestResult)" attrib="6278">
                    <parameters>
                      <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Internal.TestResult" />
                    </parameters>
                  </constructor>
                </constructors>
                <properties>
                  <property name="Outcome" attrib="0" ptype="NUnit.Framework.Api.ResultState">
                    <methods>
                      <method name="get_Outcome()" attrib="2182" returntype="NUnit.Framework.Api.ResultState">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
              </class>
              <class name="TestAdapter" type="class" base="System.Object" charset="Ansi" layout="Auto">
                <constructors>
                  <constructor name=".ctor(NUnit.Framework.Internal.Test)" attrib="6278">
                    <parameters>
                      <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                    </parameters>
                  </constructor>
                </constructors>
                <properties>
                  <property name="FullName" attrib="0" ptype="System.String">
                    <methods>
                      <method name="get_FullName()" attrib="2182" returntype="System.String">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="ID" attrib="0" ptype="System.Int32">
                    <methods>
                      <method name="get_ID()" attrib="2182" returntype="System.Int32">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="MethodName" attrib="0" ptype="System.String">
                    <methods>
                      <method name="get_MethodName()" attrib="2182" returntype="System.String">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Name" attrib="0" ptype="System.String">
                    <methods>
                      <method name="get_Name()" attrib="2182" returntype="System.String">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Properties" attrib="0" ptype="NUnit.Framework.Api.IPropertyBag">
                    <methods>
                      <method name="get_Properties()" attrib="2182" returntype="NUnit.Framework.Api.IPropertyBag">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
              </class>
            </classes>
          </class>
          <class name="TestDelegate" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke()" attrib="454" virtual="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TestFixtureAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Class" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Object[])" attrib="6278">
                <parameters>
                  <parameter name="arguments" position="0" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Object[]">
                <methods>
                  <method name="get_Arguments()" attrib="2182" returntype="System.Object[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Categories" attrib="0" ptype="System.Collections.IList">
                <methods>
                  <method name="get_Categories()" attrib="2182" returntype="System.Collections.IList">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Category" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Category()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Category(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Description" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Description()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Description(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Ignore" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Ignore()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_Ignore(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IgnoreReason" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_IgnoreReason()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_IgnoreReason(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TypeArgs" attrib="0" ptype="System.Type[]">
                <methods>
                  <method name="get_TypeArgs()" attrib="2182" returntype="System.Type[]">
                    <parameters />
                  </method>
                  <method name="set_TypeArgs(System.Type[])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Type[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestFixtureSetUpAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="TestFixtureTearDownAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="TheoryAttribute" type="class" base="NUnit.Framework.NUnitAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="True" />
                  <property name="ValidOn" value="Method" />
                </properties>
              </attribute>
            </attributes>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="Throws" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="ArgumentException" attrib="0" ptype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <methods>
                  <method name="get_ArgumentException()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Exception" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Exception()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InnerException" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_InnerException()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InvalidOperationException" attrib="0" ptype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <methods>
                  <method name="get_InvalidOperationException()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Nothing" attrib="0" ptype="NUnit.Framework.Constraints.ThrowsNothingConstraint">
                <methods>
                  <method name="get_Nothing()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ThrowsNothingConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TargetInvocationException" attrib="0" ptype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <methods>
                  <method name="get_TargetInvocationException()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="InstanceOf()" attrib="150" static="true" returntype="NUnit.Framework.Constraints.InstanceOfTypeConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InstanceOf(System.Type)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.InstanceOfTypeConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="TypeOf()" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TypeOf(System.Type)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TimeoutAttribute" type="class" base="NUnit.Framework.PropertyAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Method, Class, Assembly" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Internal.IApplyToContext" />
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="timeout" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="ValueSourceAttribute" type="class" base="NUnit.Framework.DataAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="True" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Parameter" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Api.IParameterDataSource" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="sourceName" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.String)" attrib="6278">
                <parameters>
                  <parameter name="sourceType" position="0" attrib="0" type="System.Type" />
                  <parameter name="sourceName" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="SourceName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_SourceName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SourceType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_SourceType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetData(System.Reflection.ParameterInfo)" attrib="486" virtual="true" returntype="System.Collections.IEnumerable">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ValuesAttribute" type="class" base="NUnit.Framework.DataAttribute" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.AttributeUsageAttribute">
                <properties>
                  <property name="AllowMultiple" value="False" />
                  <property name="Inherited" value="False" />
                  <property name="ValidOn" value="Parameter" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Api.IParameterDataSource" />
            </interfaces>
            <fields>
              <field name="data" attrib="4" fieldtype="System.Object[]" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object[])" attrib="6278">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="System.Object" />
                  <parameter name="arg2" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object, System.Object, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="System.Object" />
                  <parameter name="arg2" position="1" attrib="0" type="System.Object" />
                  <parameter name="arg3" position="2" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetData(System.Reflection.ParameterInfo)" attrib="486" virtual="true" returntype="System.Collections.IEnumerable">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit.Framework.Api">
        <classes>
          <class name="AttributeDictionary" type="class" base="System.Collections.Generic.Dictionary`2[System.String,System.String]" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IDictionary`2[TKey,TValue]" />
              <interface name="System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[System.Collections.Generic.KeyValuePair`2[TKey,TValue]]" />
              <interface name="System.Collections.Generic.IReadOnlyDictionary`2[TKey,TValue]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IDictionary" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Runtime.Serialization.IDeserializationCallback" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="ExpectedExceptionData" type="struct" base="System.ValueType" sealed="true" charset="Ansi" layout="Sequential">
            <properties>
              <property name="ExpectedExceptionName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExpectedExceptionName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ExpectedExceptionName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExpectedExceptionType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ExpectedExceptionType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                  <method name="set_ExpectedExceptionType(System.Type)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Type" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExpectedMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExpectedMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_ExpectedMessage(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HandlerName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HandlerName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_HandlerName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="MatchType" attrib="0" ptype="NUnit.Framework.MessageMatch">
                <methods>
                  <method name="get_MatchType()" attrib="2182" returntype="NUnit.Framework.MessageMatch">
                    <parameters />
                  </method>
                  <method name="set_MatchType(NUnit.Framework.MessageMatch)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.MessageMatch" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="UserMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_UserMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_UserMessage(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetExceptionHandler(System.Type)" attrib="134" returntype="System.Reflection.MethodInfo">
                <parameters>
                  <parameter name="fixtureType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IDynamicTestCaseSource" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetTestCaseSource()" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Api.ITestCaseSource">
                <parameters />
              </method>
              <method name="GetTestCaseSource(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Api.ITestCaseSource">
                <parameters>
                  <parameter name="instance" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IParameterDataSource" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetData(System.Reflection.ParameterInfo)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.IEnumerable">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IPropertyBag" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Collections.IList" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.IList">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.String, System.Collections.IList)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.String" />
                      <parameter name="value" position="1" attrib="0" type="System.Collections.IList" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.Generic.ICollection`1[System.String]">
                <methods>
                  <method name="get_Keys()" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.Generic.ICollection`1[System.String]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.String, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Contains(NUnit.Framework.Api.PropertyEntry)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="entry" position="0" attrib="0" type="NUnit.Framework.Api.PropertyEntry" />
                </parameters>
              </method>
              <method name="Contains(System.String, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ContainsKey(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Get(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetSetting(System.String, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetSetting(System.String, System.Enum)" attrib="1478" abstract="true" virtual="true" returntype="System.Enum">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.Enum" />
                </parameters>
              </method>
              <method name="GetSetting(System.String, System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetSetting(System.String, System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Remove(NUnit.Framework.Api.PropertyEntry)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="entry" position="0" attrib="0" type="NUnit.Framework.Api.PropertyEntry" />
                </parameters>
              </method>
              <method name="Remove(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Remove(System.String, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Set(System.String, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITest" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
            </interfaces>
            <properties>
              <property name="FixtureType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_FixtureType()" attrib="3526" abstract="true" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FullName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FullName()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HasChildren" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasChildren()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Id" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Id()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Id(System.Int32)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsSuite" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSuite()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Parent" attrib="0" ptype="NUnit.Framework.Api.ITest">
                <methods>
                  <method name="get_Parent()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Api.ITest">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Properties" attrib="0" ptype="NUnit.Framework.Api.IPropertyBag">
                <methods>
                  <method name="get_Properties()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Api.IPropertyBag">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RunState" attrib="0" ptype="NUnit.Framework.Api.RunState">
                <methods>
                  <method name="get_RunState()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Api.RunState">
                    <parameters />
                  </method>
                  <method name="set_RunState(NUnit.Framework.Api.RunState)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.Api.RunState" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Seed" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Seed()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestCaseCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_TestCaseCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tests" attrib="0" ptype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITest]">
                <methods>
                  <method name="get_Tests()" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITest]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ITestAssemblyBuilder" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="Build(System.Reflection.Assembly, System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.TestSuite">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                  <parameter name="options" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="Build(System.String, System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.TestSuite">
                <parameters>
                  <parameter name="assemblyName" position="0" attrib="0" type="System.String" />
                  <parameter name="options" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITestAssemblyRunner" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="LoadedTest" attrib="0" ptype="NUnit.Framework.Api.ITest">
                <methods>
                  <method name="get_LoadedTest()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Api.ITest">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Load(System.Reflection.Assembly, System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                  <parameter name="settings" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="Load(System.String, System.Collections.IDictionary)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="assemblyName" position="0" attrib="0" type="System.String" />
                  <parameter name="settings" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="Run(NUnit.Framework.Api.ITestListener, NUnit.Framework.Api.ITestFilter)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Api.ITestResult">
                <parameters>
                  <parameter name="listener" position="0" attrib="0" type="NUnit.Framework.Api.ITestListener" />
                  <parameter name="filter" position="1" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITestCaseData" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Object[]">
                <methods>
                  <method name="get_Arguments()" attrib="3526" abstract="true" virtual="true" returntype="System.Object[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExceptionData" attrib="0" ptype="NUnit.Framework.Api.ExpectedExceptionData">
                <methods>
                  <method name="get_ExceptionData()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Api.ExpectedExceptionData">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExpectedResult" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_ExpectedResult()" attrib="3526" abstract="true" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HasExpectedResult" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasExpectedResult()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Properties" attrib="0" ptype="NUnit.Framework.Api.IPropertyBag">
                <methods>
                  <method name="get_Properties()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Api.IPropertyBag">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RunState" attrib="0" ptype="NUnit.Framework.Api.RunState">
                <methods>
                  <method name="get_RunState()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Api.RunState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TestName()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ITestCaseSource" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetTestCasesFor(System.Reflection.MethodInfo)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITestFilter" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="IsEmpty" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsEmpty()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Pass(NUnit.Framework.Api.ITest)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITestListener" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="TestFinished(NUnit.Framework.Api.ITestResult)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                </parameters>
              </method>
              <method name="TestOutput(NUnit.Framework.Api.TestOutput)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="testOutput" position="0" attrib="0" type="NUnit.Framework.Api.TestOutput" />
                </parameters>
              </method>
              <method name="TestStarted(NUnit.Framework.Api.ITest)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITestResult" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
            </interfaces>
            <properties>
              <property name="AssertCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_AssertCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Children" attrib="0" ptype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITestResult]">
                <methods>
                  <method name="get_Children()" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITestResult]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Duration" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_Duration()" attrib="3526" abstract="true" virtual="true" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FailCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FailCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FullName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FullName()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HasChildren" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasChildren()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InconclusiveCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InconclusiveCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Message" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Message()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PassCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_PassCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResultState" attrib="0" ptype="NUnit.Framework.Api.ResultState">
                <methods>
                  <method name="get_ResultState()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Api.ResultState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SkipCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SkipCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StackTrace" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_StackTrace()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Test" attrib="0" ptype="NUnit.Framework.Api.ITest">
                <methods>
                  <method name="get_Test()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Api.ITest">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="IXmlNodeBuilder" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="AddToXml(NUnit.Framework.Api.XmlNode, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="parentNode" position="0" attrib="0" type="NUnit.Framework.Api.XmlNode" />
                  <parameter name="recursive" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="ToXml(System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="recursive" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NodeList" type="class" base="System.Collections.Generic.List`1[NUnit.Framework.Api.XmlNode]" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="PropertyEntry" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ResultState" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="Cancelled" attrib="54" fieldtype="NUnit.Framework.Api.ResultState" />
              <field name="Error" attrib="54" fieldtype="NUnit.Framework.Api.ResultState" />
              <field name="Failure" attrib="54" fieldtype="NUnit.Framework.Api.ResultState" />
              <field name="Ignored" attrib="54" fieldtype="NUnit.Framework.Api.ResultState" />
              <field name="Inconclusive" attrib="54" fieldtype="NUnit.Framework.Api.ResultState" />
              <field name="NotRunnable" attrib="54" fieldtype="NUnit.Framework.Api.ResultState" />
              <field name="Skipped" attrib="54" fieldtype="NUnit.Framework.Api.ResultState" />
              <field name="Success" attrib="54" fieldtype="NUnit.Framework.Api.ResultState" />
            </fields>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Api.TestStatus)" attrib="6278">
                <parameters>
                  <parameter name="status" position="0" attrib="0" type="NUnit.Framework.Api.TestStatus" />
                </parameters>
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Api.TestStatus, System.String)" attrib="6278">
                <parameters>
                  <parameter name="status" position="0" attrib="0" type="NUnit.Framework.Api.TestStatus" />
                  <parameter name="label" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Label" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Label()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Status" attrib="0" ptype="NUnit.Framework.Api.TestStatus">
                <methods>
                  <method name="get_Status()" attrib="2182" returntype="NUnit.Framework.Api.TestStatus">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="RunState" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Explicit" attrib="32854" fieldtype="NUnit.Framework.Api.RunState" value="2" />
              <field name="Ignored" attrib="32854" fieldtype="NUnit.Framework.Api.RunState" value="4" />
              <field name="NotRunnable" attrib="32854" fieldtype="NUnit.Framework.Api.RunState" value="0" />
              <field name="Runnable" attrib="32854" fieldtype="NUnit.Framework.Api.RunState" value="1" />
              <field name="Skipped" attrib="32854" fieldtype="NUnit.Framework.Api.RunState" value="3" />
            </fields>
          </class>
          <class name="TestOutput" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String, NUnit.Framework.Api.TestOutputType)" attrib="6278">
                <parameters>
                  <parameter name="text" position="0" attrib="0" type="System.String" />
                  <parameter name="type" position="1" attrib="0" type="NUnit.Framework.Api.TestOutputType" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Text" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Text()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Type" attrib="0" ptype="NUnit.Framework.Api.TestOutputType">
                <methods>
                  <method name="get_Type()" attrib="2182" returntype="NUnit.Framework.Api.TestOutputType">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TestOutputType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Error" attrib="32854" fieldtype="NUnit.Framework.Api.TestOutputType" value="1" />
              <field name="Log" attrib="32854" fieldtype="NUnit.Framework.Api.TestOutputType" value="3" />
              <field name="Out" attrib="32854" fieldtype="NUnit.Framework.Api.TestOutputType" value="0" />
              <field name="Trace" attrib="32854" fieldtype="NUnit.Framework.Api.TestOutputType" value="2" />
            </fields>
          </class>
          <class name="TestStatus" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Failed" attrib="32854" fieldtype="NUnit.Framework.Api.TestStatus" value="3" />
              <field name="Inconclusive" attrib="32854" fieldtype="NUnit.Framework.Api.TestStatus" value="0" />
              <field name="Passed" attrib="32854" fieldtype="NUnit.Framework.Api.TestStatus" value="2" />
              <field name="Skipped" attrib="32854" fieldtype="NUnit.Framework.Api.TestStatus" value="1" />
            </fields>
          </class>
          <class name="XmlNode" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Attributes" attrib="0" ptype="NUnit.Framework.Api.AttributeDictionary">
                <methods>
                  <method name="get_Attributes()" attrib="2182" returntype="NUnit.Framework.Api.AttributeDictionary">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ChildNodes" attrib="0" ptype="NUnit.Framework.Api.NodeList">
                <methods>
                  <method name="get_ChildNodes()" attrib="2182" returntype="NUnit.Framework.Api.NodeList">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="EscapedTextContent" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_EscapedTextContent()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FirstChild" attrib="0" ptype="NUnit.Framework.Api.XmlNode">
                <methods>
                  <method name="get_FirstChild()" attrib="2182" returntype="NUnit.Framework.Api.XmlNode">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TextContent" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TextContent()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_TextContent(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddAttribute(System.String, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="AddElement(System.String)" attrib="134" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="CreateTopLevelElement(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="FindDescendant(System.String)" attrib="134" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="xpath" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="FindDescendants(System.String)" attrib="134" returntype="NUnit.Framework.Api.NodeList">
                <parameters>
                  <parameter name="xpath" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteTo(System.Xml.XmlWriter)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.Xml.XmlWriter" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit.Framework.Builders">
        <classes>
          <class name="CombinatorialStrategy" type="class" base="NUnit.Framework.Builders.CombiningStrategy" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Collections.IEnumerable[])" attrib="6278">
                <parameters>
                  <parameter name="sources" position="0" attrib="0" type="System.Collections.IEnumerable[]" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetTestCases()" attrib="198" virtual="true" is-override="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="CombinatorialTestCaseProvider" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Extensibility.ITestCaseProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetTestCasesFor(System.Reflection.MethodInfo)" attrib="486" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="HasTestCasesFor(System.Reflection.MethodInfo)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CombiningStrategy" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Collections.IEnumerable[])" attrib="6278">
                <parameters>
                  <parameter name="sources" position="0" attrib="0" type="System.Collections.IEnumerable[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Enumerators" attrib="0" ptype="System.Collections.IEnumerator[]">
                <methods>
                  <method name="get_Enumerators()" attrib="2182" returntype="System.Collections.IEnumerator[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Sources" attrib="0" ptype="System.Collections.IEnumerable[]">
                <methods>
                  <method name="get_Sources()" attrib="2182" returntype="System.Collections.IEnumerable[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetTestCases()" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="DataAttributeTestCaseProvider" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Extensibility.ITestCaseProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetTestCasesFor(System.Reflection.MethodInfo)" attrib="486" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="HasTestCasesFor(System.Reflection.MethodInfo)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DatapointProvider" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Extensibility.IParameterDataProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetDataFor(System.Reflection.ParameterInfo)" attrib="486" virtual="true" returntype="System.Collections.IEnumerable">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
              <method name="HasDataFor(System.Reflection.ParameterInfo)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NUnitTestCaseBuilder" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Extensibility.ITestCaseBuilder" />
              <interface name="NUnit.Framework.Extensibility.ITestCaseBuilder2" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="BuildFrom(System.Reflection.MethodInfo)" attrib="486" virtual="true" returntype="NUnit.Framework.Internal.Test">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="BuildFrom(System.Reflection.MethodInfo, NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="NUnit.Framework.Internal.Test">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="parentSuite" position="1" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
              <method name="BuildParameterizedMethodSuite(System.Reflection.MethodInfo, NUnit.Framework.Internal.Test)" attrib="134" returntype="NUnit.Framework.Internal.Test">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="parentSuite" position="1" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
              <method name="CanBuildFrom(System.Reflection.MethodInfo)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="CanBuildFrom(System.Reflection.MethodInfo, NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="parentSuite" position="1" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NUnitTestFixtureBuilder" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Extensibility.ISuiteBuilder" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="BuildFrom(System.Type)" attrib="486" virtual="true" returntype="NUnit.Framework.Internal.Test">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanBuildFrom(System.Type)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PairwiseStrategy" type="class" base="NUnit.Framework.Builders.CombiningStrategy" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Collections.IEnumerable[])" attrib="6278">
                <parameters>
                  <parameter name="sources" position="0" attrib="0" type="System.Collections.IEnumerable[]" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetTestCases()" attrib="198" virtual="true" is-override="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ParameterDataProvider" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Extensibility.IParameterDataProvider" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetDataFor(System.Reflection.ParameterInfo)" attrib="486" virtual="true" returntype="System.Collections.IEnumerable">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
              <method name="HasDataFor(System.Reflection.ParameterInfo)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SequentialStrategy" type="class" base="NUnit.Framework.Builders.CombiningStrategy" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Collections.IEnumerable[])" attrib="6278">
                <parameters>
                  <parameter name="sources" position="0" attrib="0" type="System.Collections.IEnumerable[]" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetTestCases()" attrib="198" virtual="true" is-override="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters />
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit.Framework.Constraints">
        <classes>
          <class name="ActualValueDelegate`1" type="delegate" base="System.MulticastDelegate" sealed="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.ICloneable" />
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Object, System.IntPtr)" attrib="6278">
                <parameters>
                  <parameter name="object" position="0" attrib="0" type="System.Object" />
                  <parameter name="method" position="1" attrib="0" type="System.IntPtr" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="BeginInvoke(System.AsyncCallback, System.Object)" attrib="454" virtual="true" returntype="System.IAsyncResult">
                <parameters>
                  <parameter name="callback" position="0" attrib="0" type="System.AsyncCallback" />
                  <parameter name="object" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EndInvoke(System.IAsyncResult)" attrib="454" virtual="true" returntype="T">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="System.IAsyncResult" />
                </parameters>
              </method>
              <method name="Invoke()" attrib="454" virtual="true" returntype="T">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="AllItemsConstraint" type="class" base="NUnit.Framework.Constraints.PrefixConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="itemConstraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AllOperator" type="class" base="NUnit.Framework.Constraints.CollectionOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyPrefix(NUnit.Framework.Constraints.Constraint)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AndConstraint" type="class" base="NUnit.Framework.Constraints.BinaryConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AndOperator" type="class" base="NUnit.Framework.Constraints.BinaryOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyOperator(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.Constraint)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AssignableFromConstraint" type="class" base="NUnit.Framework.Constraints.TypeConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AssignableToConstraint" type="class" base="NUnit.Framework.Constraints.TypeConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AttributeConstraint" type="class" base="NUnit.Framework.Constraints.PrefixConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type, NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="baseConstraint" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetStringRepresentation()" attrib="196" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AttributeExistsConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="AttributeOperator" type="class" base="NUnit.Framework.Constraints.SelfResolvingOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Reduce(NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="stack" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BasicConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object, System.String)" attrib="6276">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="description" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BinaryConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <fields>
              <field name="left" attrib="4" fieldtype="NUnit.Framework.Constraints.Constraint" />
              <field name="right" attrib="4" fieldtype="NUnit.Framework.Constraints.Constraint" />
            </fields>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.Constraint)" attrib="6276">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="BinaryOperator" type="class" base="NUnit.Framework.Constraints.ConstraintOperator" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="LeftPrecedence" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_LeftPrecedence()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RightPrecedence" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_RightPrecedence()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ApplyOperator(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.Constraint)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="Reduce(NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="stack" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="BinarySerializableConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetStringRepresentation()" attrib="196" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CollectionConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Object)" attrib="6276">
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="IsEmpty(System.Collections.IEnumerable)" attrib="148" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="enumerable" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="doMatch(System.Collections.IEnumerable)" attrib="1476" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CollectionContainsConstraint" type="class" base="NUnit.Framework.Constraints.CollectionItemsEqualConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="doMatch(System.Collections.IEnumerable)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CollectionEquivalentConstraint" type="class" base="NUnit.Framework.Constraints.CollectionItemsEqualConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Collections.IEnumerable)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="doMatch(System.Collections.IEnumerable)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CollectionItemsEqualConstraint" type="class" base="NUnit.Framework.Constraints.CollectionConstraint" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Object)" attrib="6276">
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IgnoreCase" attrib="0" ptype="NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ItemsEqual(System.Object, System.Object)" attrib="132" returntype="System.Boolean">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Object" />
                  <parameter name="y" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Tally(System.Collections.IEnumerable)" attrib="132" returntype="NUnit.Framework.Constraints.CollectionTally">
                <parameters>
                  <parameter name="c" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="Using(System.Collections.Generic.IComparer`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(System.Collections.Generic.IEqualityComparer`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(System.Collections.IComparer)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Using(System.Collections.IEqualityComparer)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="Using(System.Comparison`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Comparison`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="CollectionOperator" type="class" base="NUnit.Framework.Constraints.PrefixOperator" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="CollectionOrderedConstraint" type="class" base="NUnit.Framework.Constraints.CollectionConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Descending" attrib="0" ptype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                <methods>
                  <method name="get_Descending()" attrib="2182" returntype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="By(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                <parameters>
                  <parameter name="propertyName" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetStringRepresentation()" attrib="196" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Using(System.Collections.Generic.IComparer`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(System.Collections.IComparer)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Using(System.Comparison`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Comparison`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="doMatch(System.Collections.IEnumerable)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CollectionSubsetConstraint" type="class" base="NUnit.Framework.Constraints.CollectionItemsEqualConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Collections.IEnumerable)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="doMatch(System.Collections.IEnumerable)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CollectionTally" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.NUnitEqualityComparer, System.Collections.IEnumerable)" attrib="6278">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="NUnit.Framework.Constraints.NUnitEqualityComparer" />
                  <parameter name="c" position="1" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="TryRemove(System.Collections.IEnumerable)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="c" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="TryRemove(System.Object)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="o" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ComparisonAdapter" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Default" attrib="0" ptype="NUnit.Framework.Constraints.ComparisonAdapter">
                <methods>
                  <method name="get_Default()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ComparisonAdapter">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Compare(System.Object, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="For(System.Collections.Generic.IComparer`1[T])" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ComparisonAdapter">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="For(System.Collections.IComparer)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ComparisonAdapter">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="For(System.Comparison`1[T])" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ComparisonAdapter">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Comparison`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="ComparisonConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <fields>
              <field name="comparer" attrib="4" fieldtype="NUnit.Framework.Constraints.ComparisonAdapter" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object, System.Object)" attrib="6278">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="System.Object" />
                  <parameter name="arg2" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Using(System.Collections.Generic.IComparer`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.ComparisonConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(System.Collections.IComparer)" attrib="134" returntype="NUnit.Framework.Constraints.ComparisonConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Using(System.Comparison`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.ComparisonConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Comparison`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="Constraint" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <fields>
              <field name="UNSET" attrib="20" fieldtype="System.Object" />
              <field name="actual" attrib="4" fieldtype="System.Object" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.Object)" attrib="6276">
                <parameters>
                  <parameter name="arg" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Object, System.Object)" attrib="6276">
                <parameters>
                  <parameter name="arg1" position="0" attrib="0" type="System.Object" />
                  <parameter name="arg2" position="1" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="And" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_And()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DisplayName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DisplayName()" attrib="2180" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_DisplayName(System.String)" attrib="2180" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Or" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_Or()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="With" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_With()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="After(System.Int32)" attrib="134" returntype="NUnit.Framework.Constraints.DelayedConstraint">
                <parameters>
                  <parameter name="delayInMilliseconds" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="After(System.Int32, System.Int32)" attrib="134" returntype="NUnit.Framework.Constraints.DelayedConstraint">
                <parameters>
                  <parameter name="delayInMilliseconds" position="0" attrib="0" type="System.Int32" />
                  <parameter name="pollingInterval" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetStringRepresentation()" attrib="452" virtual="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Matches(NUnit.Framework.Constraints.ActualValueDelegate`1[T])" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Matches(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Matches(T&amp;)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="op_BitwiseAnd(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.Constraint)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="op_BitwiseOr(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.Constraint)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="op_LogicalNot(NUnit.Framework.Constraints.Constraint)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ConstraintBuilder" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="IsResolvable" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsResolvable()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Append(NUnit.Framework.Constraints.Constraint)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="Append(NUnit.Framework.Constraints.ConstraintOperator)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="op" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintOperator" />
                </parameters>
              </method>
              <method name="Resolve()" attrib="134" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters />
              </method>
            </methods>
            <classes>
              <class name="ConstraintStack" type="class" base="System.Object" charset="Ansi" layout="Auto">
                <constructors>
                  <constructor name=".ctor(NUnit.Framework.Constraints.ConstraintBuilder)" attrib="6278">
                    <parameters>
                      <parameter name="builder" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder" />
                    </parameters>
                  </constructor>
                </constructors>
                <properties>
                  <property name="Empty" attrib="0" ptype="System.Boolean">
                    <methods>
                      <method name="get_Empty()" attrib="2182" returntype="System.Boolean">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Top" attrib="0" ptype="NUnit.Framework.Constraints.Constraint">
                    <methods>
                      <method name="get_Top()" attrib="2182" returntype="NUnit.Framework.Constraints.Constraint">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Pop()" attrib="134" returntype="NUnit.Framework.Constraints.Constraint">
                    <parameters />
                  </method>
                  <method name="Push(NUnit.Framework.Constraints.Constraint)" attrib="134" returntype="System.Void">
                    <parameters>
                      <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                    </parameters>
                  </method>
                </methods>
              </class>
              <class name="OperatorStack" type="class" base="System.Object" charset="Ansi" layout="Auto">
                <constructors>
                  <constructor name=".ctor(NUnit.Framework.Constraints.ConstraintBuilder)" attrib="6278">
                    <parameters>
                      <parameter name="builder" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder" />
                    </parameters>
                  </constructor>
                </constructors>
                <properties>
                  <property name="Empty" attrib="0" ptype="System.Boolean">
                    <methods>
                      <method name="get_Empty()" attrib="2182" returntype="System.Boolean">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                  <property name="Top" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintOperator">
                    <methods>
                      <method name="get_Top()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintOperator">
                        <parameters />
                      </method>
                    </methods>
                  </property>
                </properties>
                <methods>
                  <method name="Pop()" attrib="134" returntype="NUnit.Framework.Constraints.ConstraintOperator">
                    <parameters />
                  </method>
                  <method name="Push(NUnit.Framework.Constraints.ConstraintOperator)" attrib="134" returntype="System.Void">
                    <parameters>
                      <parameter name="op" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintOperator" />
                    </parameters>
                  </method>
                </methods>
              </class>
            </classes>
          </class>
          <class name="ConstraintExpression" type="class" base="NUnit.Framework.Constraints.ConstraintExpressionBase" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Constraints.ConstraintBuilder)" attrib="6278">
                <parameters>
                  <parameter name="builder" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="All" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_All()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BinarySerializable" attrib="0" ptype="NUnit.Framework.Constraints.BinarySerializableConstraint">
                <methods>
                  <method name="get_BinarySerializable()" attrib="2182" returntype="NUnit.Framework.Constraints.BinarySerializableConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Empty" attrib="0" ptype="NUnit.Framework.Constraints.EmptyConstraint">
                <methods>
                  <method name="get_Empty()" attrib="2182" returntype="NUnit.Framework.Constraints.EmptyConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="False" attrib="0" ptype="NUnit.Framework.Constraints.FalseConstraint">
                <methods>
                  <method name="get_False()" attrib="2182" returntype="NUnit.Framework.Constraints.FalseConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InnerException" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_InnerException()" attrib="2182" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Length()" attrib="2182" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Message" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Message()" attrib="2182" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NaN" attrib="0" ptype="NUnit.Framework.Constraints.NaNConstraint">
                <methods>
                  <method name="get_NaN()" attrib="2182" returntype="NUnit.Framework.Constraints.NaNConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Negative" attrib="0" ptype="NUnit.Framework.Constraints.LessThanConstraint">
                <methods>
                  <method name="get_Negative()" attrib="2182" returntype="NUnit.Framework.Constraints.LessThanConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="No" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_No()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="None" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_None()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Not" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_Not()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Null" attrib="0" ptype="NUnit.Framework.Constraints.NullConstraint">
                <methods>
                  <method name="get_Null()" attrib="2182" returntype="NUnit.Framework.Constraints.NullConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Ordered" attrib="0" ptype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                <methods>
                  <method name="get_Ordered()" attrib="2182" returntype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Positive" attrib="0" ptype="NUnit.Framework.Constraints.GreaterThanConstraint">
                <methods>
                  <method name="get_Positive()" attrib="2182" returntype="NUnit.Framework.Constraints.GreaterThanConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Some" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_Some()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="True" attrib="0" ptype="NUnit.Framework.Constraints.TrueConstraint">
                <methods>
                  <method name="get_True()" attrib="2182" returntype="NUnit.Framework.Constraints.TrueConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Unique" attrib="0" ptype="NUnit.Framework.Constraints.UniqueItemsConstraint">
                <methods>
                  <method name="get_Unique()" attrib="2182" returntype="NUnit.Framework.Constraints.UniqueItemsConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="With" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_With()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="XmlSerializable" attrib="0" ptype="NUnit.Framework.Constraints.XmlSerializableConstraint">
                <methods>
                  <method name="get_XmlSerializable()" attrib="2182" returntype="NUnit.Framework.Constraints.XmlSerializableConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AssignableFrom()" attrib="134" returntype="NUnit.Framework.Constraints.AssignableFromConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AssignableFrom(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.AssignableFromConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="AssignableTo()" attrib="134" returntype="NUnit.Framework.Constraints.AssignableToConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AssignableTo(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.AssignableToConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="AtLeast(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AtMost(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.LessThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Attribute()" attrib="134" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Attribute(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Contains(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionContainsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Contains(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.ContainsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ContainsSubstring(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SubstringConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="EndsWith(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.EndsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="EqualTo(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.EqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EquivalentTo(System.Collections.IEnumerable)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionEquivalentConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="Exactly(System.Int32)" attrib="134" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                <parameters>
                  <parameter name="expectedCount" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GreaterThan(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.GreaterThanConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GreaterThanOrEqualTo(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="InRange(T, T)" attrib="134" returntype="NUnit.Framework.Constraints.RangeConstraint`1[T]">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="T" />
                  <parameter name="to" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.IComparable`1[T]" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="InstanceOf()" attrib="134" returntype="NUnit.Framework.Constraints.InstanceOfTypeConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InstanceOf(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.InstanceOfTypeConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="LessThan(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.LessThanConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="LessThanOrEqualTo(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.LessThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Matches(NUnit.Framework.Constraints.Constraint)" attrib="134" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="Matches(System.Predicate`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="System.Predicate`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Matches(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.RegexConstraint">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Member(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionContainsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Property(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SameAs(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.SameAsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SamePath(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SamePathConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SamePathOrUnder(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SamePathOrUnderConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StartsWith(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.StartsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringContaining(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SubstringConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringEnding(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.EndsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringMatching(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.RegexConstraint">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringStarting(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.StartsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SubPath(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SubPathConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SubsetOf(System.Collections.IEnumerable)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionSubsetConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="TypeOf()" attrib="134" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TypeOf(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ConstraintExpressionBase" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="builder" attrib="4" fieldtype="NUnit.Framework.Constraints.ConstraintBuilder" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Constraints.ConstraintBuilder)" attrib="6278">
                <parameters>
                  <parameter name="builder" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Append(NUnit.Framework.Constraints.Constraint)" attrib="134" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="Append(NUnit.Framework.Constraints.ConstraintOperator)" attrib="134" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                <parameters>
                  <parameter name="op" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintOperator" />
                </parameters>
              </method>
              <method name="Append(NUnit.Framework.Constraints.SelfResolvingOperator)" attrib="134" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters>
                  <parameter name="op" position="0" attrib="0" type="NUnit.Framework.Constraints.SelfResolvingOperator" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ConstraintFactory" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="All" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_All()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="BinarySerializable" attrib="0" ptype="NUnit.Framework.Constraints.BinarySerializableConstraint">
                <methods>
                  <method name="get_BinarySerializable()" attrib="2182" returntype="NUnit.Framework.Constraints.BinarySerializableConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Count" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Count()" attrib="2182" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Empty" attrib="0" ptype="NUnit.Framework.Constraints.EmptyConstraint">
                <methods>
                  <method name="get_Empty()" attrib="2182" returntype="NUnit.Framework.Constraints.EmptyConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="False" attrib="0" ptype="NUnit.Framework.Constraints.FalseConstraint">
                <methods>
                  <method name="get_False()" attrib="2182" returntype="NUnit.Framework.Constraints.FalseConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InnerException" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_InnerException()" attrib="2182" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Length" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Length()" attrib="2182" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Message" attrib="0" ptype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <methods>
                  <method name="get_Message()" attrib="2182" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NaN" attrib="0" ptype="NUnit.Framework.Constraints.NaNConstraint">
                <methods>
                  <method name="get_NaN()" attrib="2182" returntype="NUnit.Framework.Constraints.NaNConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Negative" attrib="0" ptype="NUnit.Framework.Constraints.LessThanConstraint">
                <methods>
                  <method name="get_Negative()" attrib="2182" returntype="NUnit.Framework.Constraints.LessThanConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="No" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_No()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="None" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_None()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Not" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_Not()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Null" attrib="0" ptype="NUnit.Framework.Constraints.NullConstraint">
                <methods>
                  <method name="get_Null()" attrib="2182" returntype="NUnit.Framework.Constraints.NullConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Ordered" attrib="0" ptype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                <methods>
                  <method name="get_Ordered()" attrib="2182" returntype="NUnit.Framework.Constraints.CollectionOrderedConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Positive" attrib="0" ptype="NUnit.Framework.Constraints.GreaterThanConstraint">
                <methods>
                  <method name="get_Positive()" attrib="2182" returntype="NUnit.Framework.Constraints.GreaterThanConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Some" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_Some()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="True" attrib="0" ptype="NUnit.Framework.Constraints.TrueConstraint">
                <methods>
                  <method name="get_True()" attrib="2182" returntype="NUnit.Framework.Constraints.TrueConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Unique" attrib="0" ptype="NUnit.Framework.Constraints.UniqueItemsConstraint">
                <methods>
                  <method name="get_Unique()" attrib="2182" returntype="NUnit.Framework.Constraints.UniqueItemsConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="XmlSerializable" attrib="0" ptype="NUnit.Framework.Constraints.XmlSerializableConstraint">
                <methods>
                  <method name="get_XmlSerializable()" attrib="2182" returntype="NUnit.Framework.Constraints.XmlSerializableConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AssignableFrom()" attrib="134" returntype="NUnit.Framework.Constraints.AssignableFromConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AssignableFrom(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.AssignableFromConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="AssignableTo()" attrib="134" returntype="NUnit.Framework.Constraints.AssignableToConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="AssignableTo(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.AssignableToConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="AtLeast(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AtMost(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.LessThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Attribute()" attrib="134" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Attribute(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Contains(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionContainsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Contains(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.ContainsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ContainsSubstring(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SubstringConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DoesNotContain(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SubstringConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DoesNotEndWith(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.EndsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DoesNotMatch(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.RegexConstraint">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="DoesNotStartWith(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.StartsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="EndsWith(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.EndsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="EqualTo(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.EqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="EquivalentTo(System.Collections.IEnumerable)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionEquivalentConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="Exactly(System.Int32)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                <parameters>
                  <parameter name="expectedCount" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GreaterThan(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.GreaterThanConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="GreaterThanOrEqualTo(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="InRange(T, T)" attrib="134" returntype="NUnit.Framework.Constraints.RangeConstraint`1[T]">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="T" />
                  <parameter name="to" position="1" attrib="0" type="T" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0">
                    <generic-parameter-constraints>
                      <generic-parameter-constraint name="System.IComparable`1[T]" />
                    </generic-parameter-constraints>
                  </generic-parameter>
                </generic-parameters>
              </method>
              <method name="InstanceOf()" attrib="134" returntype="NUnit.Framework.Constraints.InstanceOfTypeConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="InstanceOf(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.InstanceOfTypeConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="LessThan(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.LessThanConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="LessThanOrEqualTo(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.LessThanOrEqualConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Matches(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.RegexConstraint">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Member(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionContainsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Property(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.ResolvableConstraintExpression">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SameAs(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.SameAsConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="SamePath(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SamePathConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SamePathOrUnder(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SamePathOrUnderConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StartsWith(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.StartsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringContaining(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SubstringConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringEnding(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.EndsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringMatching(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.RegexConstraint">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="StringStarting(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.StartsWithConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SubPath(System.String)" attrib="134" returntype="NUnit.Framework.Constraints.SubPathConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SubsetOf(System.Collections.IEnumerable)" attrib="134" returntype="NUnit.Framework.Constraints.CollectionSubsetConstraint">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
              <method name="TypeOf()" attrib="134" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="TypeOf(System.Type)" attrib="134" returntype="NUnit.Framework.Constraints.ExactTypeConstraint">
                <parameters>
                  <parameter name="expectedType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ConstraintOperator" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="left_precedence" attrib="4" fieldtype="System.Int32" />
              <field name="right_precedence" attrib="4" fieldtype="System.Int32" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="LeftContext" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_LeftContext()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_LeftContext(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="LeftPrecedence" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_LeftPrecedence()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RightContext" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_RightContext()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_RightContext(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RightPrecedence" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_RightPrecedence()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Reduce(NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="stack" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ContainsConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IgnoreCase" attrib="0" ptype="NUnit.Framework.Constraints.ContainsConstraint">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="NUnit.Framework.Constraints.ContainsConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Using(System.Collections.Generic.IComparer`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.ContainsConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(System.Collections.Generic.IEqualityComparer`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.ContainsConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(System.Collections.IComparer)" attrib="134" returntype="NUnit.Framework.Constraints.ContainsConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Using(System.Collections.IEqualityComparer)" attrib="134" returntype="NUnit.Framework.Constraints.ContainsConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="Using(System.Comparison`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.ContainsConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Comparison`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DelayedConstraint" type="class" base="NUnit.Framework.Constraints.PrefixConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="baseConstraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="delayInMilliseconds" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint, System.Int32, System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="baseConstraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="delayInMilliseconds" position="1" attrib="0" type="System.Int32" />
                  <parameter name="pollingInterval" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetStringRepresentation()" attrib="196" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Matches(NUnit.Framework.Constraints.ActualValueDelegate`1[T])" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Matches(T&amp;)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="T" direction="ref" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EmptyCollectionConstraint" type="class" base="NUnit.Framework.Constraints.CollectionConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="doMatch(System.Collections.IEnumerable)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EmptyConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EmptyDirectoryConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EmptyStringConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EndsWithConstraint" type="class" base="NUnit.Framework.Constraints.StringConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.String)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EqualConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AsCollection" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_AsCollection()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Days" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_Days()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Hours" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_Hours()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IgnoreCase" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Milliseconds" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_Milliseconds()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Minutes" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_Minutes()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NoClip" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_NoClip()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Percent" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_Percent()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Seconds" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_Seconds()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Ticks" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_Ticks()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Ulps" attrib="0" ptype="NUnit.Framework.Constraints.EqualConstraint">
                <methods>
                  <method name="get_Ulps()" attrib="2182" returntype="NUnit.Framework.Constraints.EqualConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Using(System.Collections.Generic.IComparer`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.EqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(System.Collections.Generic.IEqualityComparer`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.EqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Using(System.Collections.IComparer)" attrib="134" returntype="NUnit.Framework.Constraints.EqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="Using(System.Collections.IEqualityComparer)" attrib="134" returntype="NUnit.Framework.Constraints.EqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="Using(System.Comparison`1[T])" attrib="134" returntype="NUnit.Framework.Constraints.EqualConstraint">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Comparison`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Within(System.Object)" attrib="134" returntype="NUnit.Framework.Constraints.EqualConstraint">
                <parameters>
                  <parameter name="amount" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="EqualityAdapter" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="AreEqual(System.Object, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Object" />
                  <parameter name="y" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CanCompare(System.Object, System.Object)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Object" />
                  <parameter name="y" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="For(System.Collections.Generic.IComparer`1[T])" attrib="150" static="true" returntype="NUnit.Framework.Constraints.EqualityAdapter">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="For(System.Collections.Generic.IEqualityComparer`1[T])" attrib="150" static="true" returntype="NUnit.Framework.Constraints.EqualityAdapter">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.Generic.IEqualityComparer`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="For(System.Collections.IComparer)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.EqualityAdapter">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IComparer" />
                </parameters>
              </method>
              <method name="For(System.Collections.IEqualityComparer)" attrib="150" static="true" returntype="NUnit.Framework.Constraints.EqualityAdapter">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Collections.IEqualityComparer" />
                </parameters>
              </method>
              <method name="For(System.Comparison`1[T])" attrib="150" static="true" returntype="NUnit.Framework.Constraints.EqualityAdapter">
                <parameters>
                  <parameter name="comparer" position="0" attrib="0" type="System.Comparison`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
            </methods>
          </class>
          <class name="ExactCountConstraint" type="class" base="NUnit.Framework.Constraints.PrefixConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Int32, NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="expectedCount" position="0" attrib="0" type="System.Int32" />
                  <parameter name="itemConstraint" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ExactCountOperator" type="class" base="NUnit.Framework.Constraints.CollectionOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="expectedCount" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyPrefix(NUnit.Framework.Constraints.Constraint)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ExactTypeConstraint" type="class" base="NUnit.Framework.Constraints.TypeConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ExceptionTypeConstraint" type="class" base="NUnit.Framework.Constraints.ExactTypeConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FailurePoint" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="ActualHasData" attrib="6" fieldtype="System.Boolean" />
              <field name="ActualValue" attrib="6" fieldtype="System.Object" />
              <field name="ExpectedHasData" attrib="6" fieldtype="System.Boolean" />
              <field name="ExpectedValue" attrib="6" fieldtype="System.Object" />
              <field name="Position" attrib="6" fieldtype="System.Int32" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="FalseConstraint" type="class" base="NUnit.Framework.Constraints.BasicConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="FloatingPointNumerics" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <methods>
              <method name="AreAlmostEqualUlps(System.Double, System.Double, System.Int64)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Double" />
                  <parameter name="right" position="1" attrib="0" type="System.Double" />
                  <parameter name="maxUlps" position="2" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="AreAlmostEqualUlps(System.Single, System.Single, System.Int32)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="System.Single" />
                  <parameter name="right" position="1" attrib="0" type="System.Single" />
                  <parameter name="maxUlps" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ReinterpretAsDouble(System.Int64)" attrib="150" static="true" returntype="System.Double">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int64" />
                </parameters>
              </method>
              <method name="ReinterpretAsFloat(System.Int32)" attrib="150" static="true" returntype="System.Single">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ReinterpretAsInt(System.Single)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Single" />
                </parameters>
              </method>
              <method name="ReinterpretAsLong(System.Double)" attrib="150" static="true" returntype="System.Int64">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Double" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="GreaterThanConstraint" type="class" base="NUnit.Framework.Constraints.ComparisonConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="GreaterThanOrEqualConstraint" type="class" base="NUnit.Framework.Constraints.ComparisonConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IResolveConstraint" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="Resolve()" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="InstanceOfTypeConstraint" type="class" base="NUnit.Framework.Constraints.TypeConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LessThanConstraint" type="class" base="NUnit.Framework.Constraints.ComparisonConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="LessThanOrEqualConstraint" type="class" base="NUnit.Framework.Constraints.ComparisonConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MessageWriter" type="class" base="System.IO.StringWriter" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="MaxLineLength" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_MaxLineLength()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_MaxLineLength(System.Int32)" attrib="3526" abstract="true" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="DisplayDifferences(NUnit.Framework.Constraints.Constraint)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="DisplayDifferences(System.Object, System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="DisplayDifferences(System.Object, System.Object, NUnit.Framework.Constraints.Tolerance)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="tolerance" position="2" attrib="0" type="NUnit.Framework.Constraints.Tolerance" />
                </parameters>
              </method>
              <method name="DisplayStringDifferences(System.String, System.String, System.Int32, System.Boolean, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                  <parameter name="actual" position="1" attrib="0" type="System.String" />
                  <parameter name="mismatch" position="2" attrib="0" type="System.Int32" />
                  <parameter name="ignoreCase" position="3" attrib="0" type="System.Boolean" />
                  <parameter name="clipping" position="4" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="WriteActualValue(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteCollectionElements(System.Collections.IEnumerable, System.Int32, System.Int32)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.IEnumerable" />
                  <parameter name="start" position="1" attrib="0" type="System.Int32" />
                  <parameter name="max" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="WriteConnector(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="connector" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteExpectedValue(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteMessageLine(System.String, System.Object[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="WriteMessageLine(System.Int32, System.String, System.Object[])" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="level" position="0" attrib="0" type="System.Int32" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="WriteModifier(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="modifier" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WritePredicate(System.String)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteValue(System.Object)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="val" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MsgUtils" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ClipExpectedAndActual(System.String&amp;, System.String&amp;, System.Int32, System.Int32)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" direction="ref" />
                  <parameter name="actual" position="1" attrib="0" type="System.String" direction="ref" />
                  <parameter name="maxDisplayLength" position="2" attrib="0" type="System.Int32" />
                  <parameter name="mismatch" position="3" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="ClipString(System.String, System.Int32, System.Int32)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                  <parameter name="maxStringLength" position="1" attrib="0" type="System.Int32" />
                  <parameter name="clipStart" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="EscapeControlChars(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="FindMismatchPosition(System.String, System.String, System.Int32, System.Boolean)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                  <parameter name="actual" position="1" attrib="0" type="System.String" />
                  <parameter name="istart" position="2" attrib="0" type="System.Int32" />
                  <parameter name="ignoreCase" position="3" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetArrayIndicesAsString(System.Int32[])" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="indices" position="0" attrib="0" type="System.Int32[]" />
                </parameters>
              </method>
              <method name="GetArrayIndicesFromCollectionIndex(System.Collections.IEnumerable, System.Int32)" attrib="150" static="true" returntype="System.Int32[]">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.IEnumerable" />
                  <parameter name="index" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetTypeRepresentation(System.Object)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NUnitComparer" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.IComparer" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Default" attrib="0" ptype="NUnit.Framework.Constraints.NUnitComparer">
                <methods>
                  <method name="get_Default()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.NUnitComparer">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Compare(System.Object, System.Object)" attrib="486" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="x" position="0" attrib="0" type="System.Object" />
                  <parameter name="y" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NUnitEqualityComparer" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="CompareAsCollection" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_CompareAsCollection()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_CompareAsCollection(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Default" attrib="0" ptype="NUnit.Framework.Constraints.NUnitEqualityComparer">
                <methods>
                  <method name="get_Default()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.NUnitEqualityComparer">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExternalComparers" attrib="0" ptype="System.Collections.Generic.IList`1[NUnit.Framework.Constraints.EqualityAdapter]">
                <methods>
                  <method name="get_ExternalComparers()" attrib="2182" returntype="System.Collections.Generic.IList`1[NUnit.Framework.Constraints.EqualityAdapter]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FailurePoints" attrib="0" ptype="System.Collections.Generic.IList`1[NUnit.Framework.Constraints.FailurePoint]">
                <methods>
                  <method name="get_FailurePoints()" attrib="2182" returntype="System.Collections.Generic.IList`1[NUnit.Framework.Constraints.FailurePoint]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IgnoreCase" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_IgnoreCase(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AreEqual(System.Object, System.Object, NUnit.Framework.Constraints.Tolerance&amp;)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="tolerance" position="2" attrib="0" type="NUnit.Framework.Constraints.Tolerance" direction="ref" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NaNConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NoItemConstraint" type="class" base="NUnit.Framework.Constraints.PrefixConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="itemConstraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NoneOperator" type="class" base="NUnit.Framework.Constraints.CollectionOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyPrefix(NUnit.Framework.Constraints.Constraint)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NotConstraint" type="class" base="NUnit.Framework.Constraints.PrefixConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="baseConstraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NotOperator" type="class" base="NUnit.Framework.Constraints.PrefixOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyPrefix(NUnit.Framework.Constraints.Constraint)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NullConstraint" type="class" base="NUnit.Framework.Constraints.BasicConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="NullOrEmptyStringConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Numerics" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <methods>
              <method name="AreEqual(System.Object, System.Object, NUnit.Framework.Constraints.Tolerance&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="tolerance" position="2" attrib="0" type="NUnit.Framework.Constraints.Tolerance" direction="ref" />
                </parameters>
              </method>
              <method name="Compare(System.Object, System.Object)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="IsFixedPointNumeric(System.Object)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="IsFloatingPointNumeric(System.Object)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="IsNumericType(System.Object)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OrConstraint" type="class" base="NUnit.Framework.Constraints.BinaryConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OrOperator" type="class" base="NUnit.Framework.Constraints.BinaryOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyOperator(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.Constraint)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PathConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <fields>
              <field name="caseInsensitive" attrib="4" fieldtype="System.Boolean" />
              <field name="expectedPath" attrib="4" fieldtype="System.String" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6276">
                <parameters>
                  <parameter name="expectedPath" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IgnoreCase" attrib="0" ptype="NUnit.Framework.Constraints.PathConstraint">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="NUnit.Framework.Constraints.PathConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RespectCase" attrib="0" ptype="NUnit.Framework.Constraints.PathConstraint">
                <methods>
                  <method name="get_RespectCase()" attrib="2182" returntype="NUnit.Framework.Constraints.PathConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Canonicalize(System.String)" attrib="148" static="true" returntype="System.String">
                <parameters>
                  <parameter name="path" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetStringRepresentation()" attrib="196" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="IsMatch(System.String, System.String)" attrib="1476" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="expectedPath" position="0" attrib="0" type="System.String" />
                  <parameter name="actualPath" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsSubPath(System.String, System.String, System.Boolean)" attrib="148" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="path1" position="0" attrib="0" type="System.String" />
                  <parameter name="path2" position="1" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PredicateConstraint`1" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0" />
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(System.Predicate`1[T])" attrib="6278">
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="System.Predicate`1[T]" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PrefixConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <fields>
              <field name="baseConstraint" attrib="4" fieldtype="NUnit.Framework.Constraints.Constraint" />
            </fields>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.IResolveConstraint)" attrib="6276">
                <parameters>
                  <parameter name="resolvable" position="0" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="PrefixOperator" type="class" base="NUnit.Framework.Constraints.ConstraintOperator" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyPrefix(NUnit.Framework.Constraints.Constraint)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="Reduce(NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="stack" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropOperator" type="class" base="NUnit.Framework.Constraints.SelfResolvingOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Reduce(NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="stack" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropertyConstraint" type="class" base="NUnit.Framework.Constraints.PrefixConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String, NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                  <parameter name="baseConstraint" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetStringRepresentation()" attrib="196" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropertyExistsConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetStringRepresentation()" attrib="196" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RangeConstraint`1" type="class" base="NUnit.Framework.Constraints.ComparisonConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <generic-parameters>
              <generic-parameter name="T" attributes="0">
                <generic-parameter-constraints>
                  <generic-parameter-constraint name="System.IComparable`1[T]" />
                </generic-parameter-constraints>
              </generic-parameter>
            </generic-parameters>
            <constructors>
              <constructor name=".ctor(T, T)" attrib="6278">
                <parameters>
                  <parameter name="from" position="0" attrib="0" type="T" />
                  <parameter name="to" position="1" attrib="0" type="T" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RegexConstraint" type="class" base="NUnit.Framework.Constraints.StringConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="pattern" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.String)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ResolvableConstraintExpression" type="class" base="NUnit.Framework.Constraints.ConstraintExpression" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Constraints.ConstraintBuilder)" attrib="6278">
                <parameters>
                  <parameter name="builder" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="And" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_And()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Or" attrib="0" ptype="NUnit.Framework.Constraints.ConstraintExpression">
                <methods>
                  <method name="get_Or()" attrib="2182" returntype="NUnit.Framework.Constraints.ConstraintExpression">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="op_BitwiseAnd(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.ResolvableConstraintExpression)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.ResolvableConstraintExpression" />
                </parameters>
              </method>
              <method name="op_BitwiseAnd(NUnit.Framework.Constraints.ResolvableConstraintExpression, NUnit.Framework.Constraints.Constraint)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.ResolvableConstraintExpression" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="op_BitwiseAnd(NUnit.Framework.Constraints.ResolvableConstraintExpression, NUnit.Framework.Constraints.ResolvableConstraintExpression)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.ResolvableConstraintExpression" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.ResolvableConstraintExpression" />
                </parameters>
              </method>
              <method name="op_BitwiseOr(NUnit.Framework.Constraints.Constraint, NUnit.Framework.Constraints.ResolvableConstraintExpression)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.ResolvableConstraintExpression" />
                </parameters>
              </method>
              <method name="op_BitwiseOr(NUnit.Framework.Constraints.ResolvableConstraintExpression, NUnit.Framework.Constraints.Constraint)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.ResolvableConstraintExpression" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="op_BitwiseOr(NUnit.Framework.Constraints.ResolvableConstraintExpression, NUnit.Framework.Constraints.ResolvableConstraintExpression)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="left" position="0" attrib="0" type="NUnit.Framework.Constraints.ResolvableConstraintExpression" />
                  <parameter name="right" position="1" attrib="0" type="NUnit.Framework.Constraints.ResolvableConstraintExpression" />
                </parameters>
              </method>
              <method name="op_LogicalNot(NUnit.Framework.Constraints.ResolvableConstraintExpression)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.ResolvableConstraintExpression" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ReusableConstraint" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.IResolveConstraint)" attrib="6278">
                <parameters>
                  <parameter name="c" position="0" attrib="0" type="NUnit.Framework.Constraints.IResolveConstraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Resolve()" attrib="486" virtual="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters />
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="op_Implicit(NUnit.Framework.Constraints.Constraint)" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.ReusableConstraint">
                <parameters>
                  <parameter name="c" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SameAsConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SamePathConstraint" type="class" base="NUnit.Framework.Constraints.PathConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="IsMatch(System.String, System.String)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="expectedPath" position="0" attrib="0" type="System.String" />
                  <parameter name="actualPath" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SamePathOrUnderConstraint" type="class" base="NUnit.Framework.Constraints.PathConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="IsMatch(System.String, System.String)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="expectedPath" position="0" attrib="0" type="System.String" />
                  <parameter name="actualPath" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SelfResolvingOperator" type="class" base="NUnit.Framework.Constraints.ConstraintOperator" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="SomeItemsConstraint" type="class" base="NUnit.Framework.Constraints.PrefixConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="itemConstraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SomeOperator" type="class" base="NUnit.Framework.Constraints.CollectionOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyPrefix(NUnit.Framework.Constraints.Constraint)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="StartsWithConstraint" type="class" base="NUnit.Framework.Constraints.StringConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.String)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="StringConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <fields>
              <field name="caseInsensitive" attrib="4" fieldtype="System.Boolean" />
              <field name="expected" attrib="36" fieldtype="System.String" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6276">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="IgnoreCase" attrib="0" ptype="NUnit.Framework.Constraints.StringConstraint">
                <methods>
                  <method name="get_IgnoreCase()" attrib="2182" returntype="NUnit.Framework.Constraints.StringConstraint">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Matches(System.String)" attrib="1476" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SubPathConstraint" type="class" base="NUnit.Framework.Constraints.PathConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="IsMatch(System.String, System.String)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="expectedPath" position="0" attrib="0" type="System.String" />
                  <parameter name="actualPath" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SubstringConstraint" type="class" base="NUnit.Framework.Constraints.StringConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(System.String)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ThrowsConstraint" type="class" base="NUnit.Framework.Constraints.PrefixConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Constraints.Constraint)" attrib="6278">
                <parameters>
                  <parameter name="baseConstraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ActualException" attrib="0" ptype="System.Exception">
                <methods>
                  <method name="get_ActualException()" attrib="2182" returntype="System.Exception">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetStringRepresentation()" attrib="196" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Matches(NUnit.Framework.Constraints.ActualValueDelegate`1[T])" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ThrowsNothingConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Matches(NUnit.Framework.Constraints.ActualValueDelegate`1[T])" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="del" position="0" attrib="0" type="NUnit.Framework.Constraints.ActualValueDelegate`1[T]" />
                </parameters>
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ThrowsOperator" type="class" base="NUnit.Framework.Constraints.SelfResolvingOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Reduce(NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="stack" position="0" attrib="0" type="NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Tolerance" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Object)" attrib="6278">
                <parameters>
                  <parameter name="amount" position="0" attrib="0" type="System.Object" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Days" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Days()" attrib="2182" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Empty" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Empty()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Hours" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Hours()" attrib="2182" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsEmpty" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsEmpty()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Milliseconds" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Milliseconds()" attrib="2182" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Minutes" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Minutes()" attrib="2182" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Mode" attrib="0" ptype="NUnit.Framework.Constraints.ToleranceMode">
                <methods>
                  <method name="get_Mode()" attrib="2182" returntype="NUnit.Framework.Constraints.ToleranceMode">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Percent" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Percent()" attrib="2182" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Seconds" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Seconds()" attrib="2182" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Ticks" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Ticks()" attrib="2182" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Ulps" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Ulps()" attrib="2182" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Value" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Value()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Zero" attrib="0" ptype="NUnit.Framework.Constraints.Tolerance">
                <methods>
                  <method name="get_Zero()" attrib="2198" static="true" returntype="NUnit.Framework.Constraints.Tolerance">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ToleranceMode" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Linear" attrib="32854" fieldtype="NUnit.Framework.Constraints.ToleranceMode" value="1" />
              <field name="None" attrib="32854" fieldtype="NUnit.Framework.Constraints.ToleranceMode" value="0" />
              <field name="Percent" attrib="32854" fieldtype="NUnit.Framework.Constraints.ToleranceMode" value="2" />
              <field name="Ulps" attrib="32854" fieldtype="NUnit.Framework.Constraints.ToleranceMode" value="3" />
            </fields>
          </class>
          <class name="TrueConstraint" type="class" base="NUnit.Framework.Constraints.BasicConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="TypeConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <fields>
              <field name="expectedType" attrib="36" fieldtype="System.Type" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6276">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="UniqueItemsConstraint" type="class" base="NUnit.Framework.Constraints.CollectionItemsEqualConstraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="doMatch(System.Collections.IEnumerable)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Collections.IEnumerable" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="WithOperator" type="class" base="NUnit.Framework.Constraints.PrefixOperator" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="ApplyPrefix(NUnit.Framework.Constraints.Constraint)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Constraints.Constraint">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="XmlSerializableConstraint" type="class" base="NUnit.Framework.Constraints.Constraint" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Constraints.IResolveConstraint" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetStringRepresentation()" attrib="196" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
              <method name="Matches(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
              <method name="WriteDescriptionTo(NUnit.Framework.Constraints.MessageWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="NUnit.Framework.Constraints.MessageWriter" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit.Framework.Extensibility">
        <classes>
          <class name="IParameterDataProvider" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetDataFor(System.Reflection.ParameterInfo)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.IEnumerable">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
              <method name="HasDataFor(System.Reflection.ParameterInfo)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ISuiteBuilder" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="BuildFrom(System.Type)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.Test">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanBuildFrom(System.Type)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITestCaseBuilder" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="BuildFrom(System.Reflection.MethodInfo)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.Test">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="CanBuildFrom(System.Reflection.MethodInfo)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITestCaseBuilder2" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Extensibility.ITestCaseBuilder" />
            </interfaces>
            <methods>
              <method name="BuildFrom(System.Reflection.MethodInfo, NUnit.Framework.Internal.Test)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.Test">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="suite" position="1" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
              <method name="CanBuildFrom(System.Reflection.MethodInfo, NUnit.Framework.Internal.Test)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="suite" position="1" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ITestCaseProvider" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="GetTestCasesFor(System.Reflection.MethodInfo)" attrib="1478" abstract="true" virtual="true" returntype="System.Collections.Generic.IEnumerable`1[NUnit.Framework.Api.ITestCaseData]">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
              <method name="HasTestCasesFor(System.Reflection.MethodInfo)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit.Framework.Internal">
        <classes>
          <class name="AssemblyHelper" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetAssemblyName(System.Reflection.Assembly)" attrib="150" static="true" returntype="System.Reflection.AssemblyName">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                </parameters>
              </method>
              <method name="GetAssemblyPath(System.Reflection.Assembly)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                </parameters>
              </method>
              <method name="GetAssemblyPath(System.Type)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetAssemblyPathFromCodeBase(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="codeBase" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetDirectoryName(System.Reflection.Assembly)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CultureDetector" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="culture" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Reason" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Reason()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="IsCultureSupported(NUnit.Framework.CultureAttribute)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="cultureAttribute" position="0" attrib="0" type="NUnit.Framework.CultureAttribute" />
                </parameters>
              </method>
              <method name="IsCultureSupported(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="culture" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsCultureSupported(System.String[])" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="cultures" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ExceptionHelper" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="BuildMessage(System.Exception)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="exception" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </method>
              <method name="BuildStackTrace(System.Exception)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="exception" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="FinallyDelegate" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Complete()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="HandleUnhandledExc(System.Exception)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="ex" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </method>
              <method name="Set(NUnit.Framework.Internal.TestExecutionContext, System.Int64, NUnit.Framework.Internal.TestResult)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                  <parameter name="startTicks" position="1" attrib="0" type="System.Int64" />
                  <parameter name="result" position="2" attrib="0" type="NUnit.Framework.Internal.TestResult" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IApplyToContext" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="ApplyToContext(NUnit.Framework.Internal.TestExecutionContext)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="IApplyToTest" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="InvalidTestFixtureException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="inner" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="MethodHelper" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="GetDisplayName(System.Reflection.MethodInfo, System.Object[])" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="arglist" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="IsAsyncMethod(System.Reflection.MethodInfo)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NUnitException" type="class" base="System.Exception" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Serialization.ISerializable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)" attrib="6276">
                <parameters>
                  <parameter name="info" position="0" attrib="0" type="System.Runtime.Serialization.SerializationInfo" />
                  <parameter name="context" position="1" attrib="0" type="System.Runtime.Serialization.StreamingContext" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="message" position="0" attrib="0" type="System.String" />
                  <parameter name="inner" position="1" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="NUnitLiteTestAssemblyBuilder" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestAssemblyBuilder" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Build(System.Reflection.Assembly, System.Collections.IDictionary)" attrib="486" virtual="true" returntype="NUnit.Framework.Internal.TestSuite">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                  <parameter name="options" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="Build(System.String, System.Collections.IDictionary)" attrib="486" virtual="true" returntype="NUnit.Framework.Internal.TestSuite">
                <parameters>
                  <parameter name="assemblyName" position="0" attrib="0" type="System.String" />
                  <parameter name="options" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NUnitLiteTestAssemblyRunner" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestAssemblyRunner" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Api.ITestAssemblyBuilder, NUnit.Framework.Internal.FinallyDelegate)" attrib="6278">
                <parameters>
                  <parameter name="builder" position="0" attrib="0" type="NUnit.Framework.Api.ITestAssemblyBuilder" />
                  <parameter name="finallyDelegate" position="1" attrib="0" type="NUnit.Framework.Internal.FinallyDelegate" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="LoadedTest" attrib="0" ptype="NUnit.Framework.Api.ITest">
                <methods>
                  <method name="get_LoadedTest()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.ITest">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Load(System.Reflection.Assembly, System.Collections.IDictionary)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                  <parameter name="settings" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="Load(System.String, System.Collections.IDictionary)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="assemblyName" position="0" attrib="0" type="System.String" />
                  <parameter name="settings" position="1" attrib="0" type="System.Collections.IDictionary" />
                </parameters>
              </method>
              <method name="Run(NUnit.Framework.Api.ITestListener, NUnit.Framework.Api.ITestFilter)" attrib="486" virtual="true" returntype="NUnit.Framework.Api.ITestResult">
                <parameters>
                  <parameter name="listener" position="0" attrib="0" type="NUnit.Framework.Api.ITestListener" />
                  <parameter name="filter" position="1" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OSPlatform" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="UnixPlatformID_Microsoft" attrib="54" fieldtype="System.PlatformID" />
              <field name="UnixPlatformID_Mono" attrib="54" fieldtype="System.PlatformID" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.PlatformID, System.Version)" attrib="6278">
                <parameters>
                  <parameter name="platform" position="0" attrib="0" type="System.PlatformID" />
                  <parameter name="version" position="1" attrib="0" type="System.Version" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.PlatformID, System.Version, NUnit.Framework.Internal.OSPlatform+ProductType)" attrib="6278">
                <parameters>
                  <parameter name="platform" position="0" attrib="0" type="System.PlatformID" />
                  <parameter name="version" position="1" attrib="0" type="System.Version" />
                  <parameter name="product" position="2" attrib="0" type="NUnit.Framework.Internal.OSPlatform+ProductType" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CurrentPlatform" attrib="0" ptype="NUnit.Framework.Internal.OSPlatform">
                <methods>
                  <method name="get_CurrentPlatform()" attrib="2198" static="true" returntype="NUnit.Framework.Internal.OSPlatform">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsMacOSX" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsMacOSX()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsNT3" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsNT3()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsNT4" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsNT4()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsNT5" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsNT5()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsNT6" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsNT6()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsUnix" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsUnix()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsVista" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsVista()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin2003Server" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin2003Server()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin2008Server" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin2008Server()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin2008ServerR1" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin2008ServerR1()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin2008ServerR2" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin2008ServerR2()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin2012Server" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin2012Server()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin2K" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin2K()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin32NT" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin32NT()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin32S" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin32S()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin32Windows" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin32Windows()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin95" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin95()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWin98" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWin98()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWinCE" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWinCE()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWinME" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWinME()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWinXP" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWinXP()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWindows" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWindows()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWindows7" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWindows7()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsWindows8" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsWindows8()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IsXbox" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsXbox()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Platform" attrib="0" ptype="System.PlatformID">
                <methods>
                  <method name="get_Platform()" attrib="2182" returntype="System.PlatformID">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Product" attrib="0" ptype="NUnit.Framework.Internal.OSPlatform+ProductType">
                <methods>
                  <method name="get_Product()" attrib="2182" returntype="NUnit.Framework.Internal.OSPlatform+ProductType">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Version" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_Version()" attrib="2182" returntype="System.Version">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <classes>
              <class name="ProductType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
                <interfaces>
                  <interface name="System.IComparable" />
                  <interface name="System.IConvertible" />
                  <interface name="System.IFormattable" />
                </interfaces>
                <fields>
                  <field name="DomainController" attrib="32854" fieldtype="NUnit.Framework.Internal.OSPlatform+ProductType" value="2" />
                  <field name="Server" attrib="32854" fieldtype="NUnit.Framework.Internal.OSPlatform+ProductType" value="3" />
                  <field name="Unknown" attrib="32854" fieldtype="NUnit.Framework.Internal.OSPlatform+ProductType" value="0" />
                  <field name="WorkStation" attrib="32854" fieldtype="NUnit.Framework.Internal.OSPlatform+ProductType" value="1" />
                </fields>
              </class>
            </classes>
          </class>
          <class name="ParameterSet" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestCaseData" />
              <interface name="NUnit.Framework.Internal.IApplyToTest" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Api.ITestCaseData)" attrib="6278">
                <parameters>
                  <parameter name="data" position="0" attrib="0" type="NUnit.Framework.Api.ITestCaseData" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Exception)" attrib="6278">
                <parameters>
                  <parameter name="exception" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Arguments" attrib="0" ptype="System.Object[]">
                <methods>
                  <method name="get_Arguments()" attrib="2534" virtual="true" returntype="System.Object[]">
                    <parameters />
                  </method>
                  <method name="set_Arguments(System.Object[])" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object[]" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="ExceptionData" attrib="0" ptype="NUnit.Framework.Api.ExpectedExceptionData">
                <methods>
                  <method name="get_ExceptionData()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.ExpectedExceptionData">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExceptionExpected" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ExceptionExpected()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExpectedResult" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_ExpectedResult()" attrib="2534" virtual="true" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_ExpectedResult(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HasExpectedResult" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasExpectedResult()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OriginalArguments" attrib="0" ptype="System.Object[]">
                <methods>
                  <method name="get_OriginalArguments()" attrib="2182" returntype="System.Object[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Properties" attrib="0" ptype="NUnit.Framework.Api.IPropertyBag">
                <methods>
                  <method name="get_Properties()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.IPropertyBag">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RunState" attrib="0" ptype="NUnit.Framework.Api.RunState">
                <methods>
                  <method name="get_RunState()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.RunState">
                    <parameters />
                  </method>
                  <method name="set_RunState(NUnit.Framework.Api.RunState)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.Api.RunState" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TestName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TestName()" attrib="2534" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_TestName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="ApplyToTest(NUnit.Framework.Internal.Test)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ParameterizedFixtureSuite" type="class" base="NUnit.Framework.Internal.TestSuite" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITest" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
              <interface name="System.IComparable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ParameterizedType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_ParameterizedType()" attrib="2182" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TestType()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="ParameterizedMethodSuite" type="class" base="NUnit.Framework.Internal.TestSuite" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITest" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
              <interface name="System.IComparable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Reflection.MethodInfo)" attrib="6278">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Method" attrib="0" ptype="System.Reflection.MethodInfo">
                <methods>
                  <method name="get_Method()" attrib="2182" returntype="System.Reflection.MethodInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TestType()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="GetOneTimeTearDownCommand()" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.Commands.TestCommand">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="PlatformHelper" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="OSPlatforms" attrib="54" fieldtype="System.String" />
              <field name="RuntimePlatforms" attrib="54" fieldtype="System.String" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Internal.OSPlatform, NUnit.Framework.Internal.RuntimeFramework)" attrib="6278">
                <parameters>
                  <parameter name="os" position="0" attrib="0" type="NUnit.Framework.Internal.OSPlatform" />
                  <parameter name="rt" position="1" attrib="0" type="NUnit.Framework.Internal.RuntimeFramework" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Reason" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Reason()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="IsPlatformSupported(NUnit.Framework.PlatformAttribute)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="platformAttribute" position="0" attrib="0" type="NUnit.Framework.PlatformAttribute" />
                </parameters>
              </method>
              <method name="IsPlatformSupported(System.String)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="platform" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="IsPlatformSupported(System.String[])" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="platforms" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="PropertyBag" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <attributes>
              <attribute name="System.Reflection.DefaultMemberAttribute">
                <properties>
                  <property name="MemberName" value="Item" />
                </properties>
              </attribute>
            </attributes>
            <interfaces>
              <interface name="NUnit.Framework.Api.IPropertyBag" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
              <interface name="System.Collections.IEnumerable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Count" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Count()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Item" attrib="0" ptype="System.Collections.IList" params="System.String">
                <methods>
                  <method name="get_Item(System.String)" attrib="2534" virtual="true" returntype="System.Collections.IList">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                  <method name="set_Item(System.String, System.Collections.IList)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="key" position="0" attrib="0" type="System.String" />
                      <parameter name="value" position="1" attrib="0" type="System.Collections.IList" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Keys" attrib="0" ptype="System.Collections.Generic.ICollection`1[System.String]">
                <methods>
                  <method name="get_Keys()" attrib="2534" virtual="true" returntype="System.Collections.Generic.ICollection`1[System.String]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(System.String, System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="AddToXml(NUnit.Framework.Api.XmlNode, System.Boolean)" attrib="486" virtual="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="parentNode" position="0" attrib="0" type="NUnit.Framework.Api.XmlNode" />
                  <parameter name="recursive" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="Clear()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Contains(NUnit.Framework.Api.PropertyEntry)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="entry" position="0" attrib="0" type="NUnit.Framework.Api.PropertyEntry" />
                </parameters>
              </method>
              <method name="Contains(System.String, System.Object)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ContainsKey(System.String)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Get(System.String)" attrib="486" virtual="true" returntype="System.Object">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="GetEnumerator()" attrib="486" virtual="true" returntype="System.Collections.IEnumerator">
                <parameters />
              </method>
              <method name="GetSetting(System.String, System.Boolean)" attrib="486" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="GetSetting(System.String, System.Enum)" attrib="486" virtual="true" returntype="System.Enum">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.Enum" />
                </parameters>
              </method>
              <method name="GetSetting(System.String, System.Int32)" attrib="486" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetSetting(System.String, System.String)" attrib="486" virtual="true" returntype="System.String">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="defaultValue" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Remove(NUnit.Framework.Api.PropertyEntry)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="entry" position="0" attrib="0" type="NUnit.Framework.Api.PropertyEntry" />
                </parameters>
              </method>
              <method name="Remove(System.String)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Remove(System.String, System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="Set(System.String, System.Object)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="key" position="0" attrib="0" type="System.String" />
                  <parameter name="value" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="ToXml(System.Boolean)" attrib="486" virtual="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="recursive" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
            <classes>
              <class name="PropertyBagEnumerator" type="class" base="System.Object" charset="Ansi" layout="Auto">
                <interfaces>
                  <interface name="System.Collections.Generic.IEnumerator`1[NUnit.Framework.Api.PropertyEntry]" />
                  <interface name="System.Collections.IEnumerator" />
                  <interface name="System.IDisposable" />
                </interfaces>
                <constructors>
                  <constructor name=".ctor(NUnit.Framework.Internal.PropertyBag)" attrib="6278">
                    <parameters>
                      <parameter name="bag" position="0" attrib="0" type="NUnit.Framework.Internal.PropertyBag" />
                    </parameters>
                  </constructor>
                </constructors>
              </class>
            </classes>
          </class>
          <class name="PropertyNames" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="AppDomain" attrib="54" fieldtype="System.String" />
              <field name="Category" attrib="54" fieldtype="System.String" />
              <field name="Description" attrib="54" fieldtype="System.String" />
              <field name="JoinType" attrib="54" fieldtype="System.String" />
              <field name="MaxTime" attrib="54" fieldtype="System.String" />
              <field name="ProcessID" attrib="54" fieldtype="System.String" />
              <field name="ProviderStackTrace" attrib="54" fieldtype="System.String" />
              <field name="RepeatCount" attrib="54" fieldtype="System.String" />
              <field name="SetCulture" attrib="54" fieldtype="System.String" />
              <field name="SetUICulture" attrib="54" fieldtype="System.String" />
              <field name="SkipReason" attrib="54" fieldtype="System.String" />
              <field name="Timeout" attrib="54" fieldtype="System.String" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="RandomGenerator" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <fields>
              <field name="seed" attrib="38" fieldtype="System.Int32" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="seed" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="GetBool()" attrib="134" returntype="System.Boolean">
                <parameters />
              </method>
              <method name="GetBool(System.Double)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="probability" position="0" attrib="0" type="System.Double" />
                </parameters>
              </method>
              <method name="GetByte()" attrib="134" returntype="System.Byte">
                <parameters />
              </method>
              <method name="GetByte(System.Byte, System.Byte)" attrib="134" returntype="System.Byte">
                <parameters>
                  <parameter name="min" position="0" attrib="0" type="System.Byte" />
                  <parameter name="max" position="1" attrib="0" type="System.Byte" />
                </parameters>
              </method>
              <method name="GetDouble()" attrib="134" returntype="System.Double">
                <parameters />
              </method>
              <method name="GetEnum()" attrib="134" returntype="T">
                <parameters />
                <generic-parameters>
                  <generic-parameter name="T" attributes="0" />
                </generic-parameters>
              </method>
              <method name="GetFloat()" attrib="134" returntype="System.Single">
                <parameters />
              </method>
              <method name="GetInt()" attrib="134" returntype="System.Int32">
                <parameters />
              </method>
              <method name="GetInt(System.Int32, System.Int32)" attrib="134" returntype="System.Int32">
                <parameters>
                  <parameter name="min" position="0" attrib="0" type="System.Int32" />
                  <parameter name="max" position="1" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetShort()" attrib="134" returntype="System.Int16">
                <parameters />
              </method>
              <method name="GetShort(System.Int16, System.Int16)" attrib="134" returntype="System.Int16">
                <parameters>
                  <parameter name="min" position="0" attrib="0" type="System.Int16" />
                  <parameter name="max" position="1" attrib="0" type="System.Int16" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Randomizer" type="class" base="System.Random" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.Int32)" attrib="6278">
                <parameters>
                  <parameter name="seed" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="InitialSeed" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InitialSeed()" attrib="2198" static="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_InitialSeed(System.Int32)" attrib="2198" static="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="CreateRandomizer()" attrib="150" static="true" returntype="NUnit.Framework.Internal.Randomizer">
                <parameters />
              </method>
              <method name="GetDoubles(System.Int32)" attrib="134" returntype="System.Double[]">
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetDoubles(System.Double, System.Double, System.Int32)" attrib="134" returntype="System.Double[]">
                <parameters>
                  <parameter name="min" position="0" attrib="0" type="System.Double" />
                  <parameter name="max" position="1" attrib="0" type="System.Double" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetEnums(System.Int32, System.Type)" attrib="134" returntype="System.Object[]">
                <parameters>
                  <parameter name="count" position="0" attrib="0" type="System.Int32" />
                  <parameter name="enumType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetInts(System.Int32, System.Int32, System.Int32)" attrib="134" returntype="System.Int32[]">
                <parameters>
                  <parameter name="min" position="0" attrib="0" type="System.Int32" />
                  <parameter name="max" position="1" attrib="0" type="System.Int32" />
                  <parameter name="count" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="GetRandomizer(System.Reflection.MemberInfo)" attrib="150" static="true" returntype="NUnit.Framework.Internal.Randomizer">
                <parameters>
                  <parameter name="member" position="0" attrib="0" type="System.Reflection.MemberInfo" />
                </parameters>
              </method>
              <method name="GetRandomizer(System.Reflection.ParameterInfo)" attrib="150" static="true" returntype="NUnit.Framework.Internal.Randomizer">
                <parameters>
                  <parameter name="parameter" position="0" attrib="0" type="System.Reflection.ParameterInfo" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Reflect" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <methods>
              <method name="Construct(System.Type)" attrib="150" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="Construct(System.Type, System.Object[])" attrib="150" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="GetMethodsWithAttribute(System.Type, System.Type, System.Boolean)" attrib="150" static="true" returntype="System.Reflection.MethodInfo[]">
                <parameters>
                  <parameter name="fixtureType" position="0" attrib="0" type="System.Type" />
                  <parameter name="attributeType" position="1" attrib="0" type="System.Type" />
                  <parameter name="inherit" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="HasMethodWithAttribute(System.Type, System.Type)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="fixtureType" position="0" attrib="0" type="System.Type" />
                  <parameter name="attributeType" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="InvokeMethod(System.Reflection.MethodInfo, System.Object)" attrib="150" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="fixture" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="InvokeMethod(System.Reflection.MethodInfo, System.Object, System.Object[])" attrib="150" static="true" returntype="System.Object">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="fixture" position="1" attrib="0" type="System.Object" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
            </methods>
          </class>
          <class name="RuntimeFramework" type="class" base="System.Object" sealed="true" serializable="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="DefaultVersion" attrib="54" fieldtype="System.Version" />
            </fields>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.RuntimeType, System.Version)" attrib="6278">
                <parameters>
                  <parameter name="runtime" position="0" attrib="0" type="NUnit.Framework.Internal.RuntimeType" />
                  <parameter name="version" position="1" attrib="0" type="System.Version" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AllowAnyVersion" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_AllowAnyVersion()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ClrVersion" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_ClrVersion()" attrib="2182" returntype="System.Version">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CurrentFramework" attrib="0" ptype="NUnit.Framework.Internal.RuntimeFramework">
                <methods>
                  <method name="get_CurrentFramework()" attrib="2198" static="true" returntype="NUnit.Framework.Internal.RuntimeFramework">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="DisplayName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_DisplayName()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FrameworkVersion" attrib="0" ptype="System.Version">
                <methods>
                  <method name="get_FrameworkVersion()" attrib="2182" returntype="System.Version">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Runtime" attrib="0" ptype="NUnit.Framework.Internal.RuntimeType">
                <methods>
                  <method name="get_Runtime()" attrib="2182" returntype="NUnit.Framework.Internal.RuntimeType">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Parse(System.String)" attrib="150" static="true" returntype="NUnit.Framework.Internal.RuntimeFramework">
                <parameters>
                  <parameter name="s" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Supports(NUnit.Framework.Internal.RuntimeFramework)" attrib="134" returntype="System.Boolean">
                <parameters>
                  <parameter name="target" position="0" attrib="0" type="NUnit.Framework.Internal.RuntimeFramework" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="RuntimeType" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Any" attrib="32854" fieldtype="NUnit.Framework.Internal.RuntimeType" value="0" />
              <field name="Mono" attrib="32854" fieldtype="NUnit.Framework.Internal.RuntimeType" value="4" />
              <field name="MonoTouch" attrib="32854" fieldtype="NUnit.Framework.Internal.RuntimeType" value="6" />
              <field name="Net" attrib="32854" fieldtype="NUnit.Framework.Internal.RuntimeType" value="1" />
              <field name="NetCF" attrib="32854" fieldtype="NUnit.Framework.Internal.RuntimeType" value="2" />
              <field name="SSCLI" attrib="32854" fieldtype="NUnit.Framework.Internal.RuntimeType" value="3" />
              <field name="Silverlight" attrib="32854" fieldtype="NUnit.Framework.Internal.RuntimeType" value="5" />
            </fields>
          </class>
          <class name="StackFilter" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Filter(System.String)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="rawTrace" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="StringUtil" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="Compare(System.String, System.String, System.Boolean)" attrib="150" static="true" returntype="System.Int32">
                <parameters>
                  <parameter name="strA" position="0" attrib="0" type="System.String" />
                  <parameter name="strB" position="1" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="StringsEqual(System.String, System.String, System.Boolean)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="strA" position="0" attrib="0" type="System.String" />
                  <parameter name="strB" position="1" attrib="0" type="System.String" />
                  <parameter name="ignoreCase" position="2" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="Test" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITest" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
              <interface name="System.IComparable" />
            </interfaces>
            <fields>
              <field name="setUpMethods" attrib="4" fieldtype="System.Reflection.MethodInfo[]" />
              <field name="tearDownMethods" attrib="4" fieldtype="System.Reflection.MethodInfo[]" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6276">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6276">
                <parameters>
                  <parameter name="fixtureType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6276">
                <parameters>
                  <parameter name="pathName" position="0" attrib="0" type="System.String" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Fixture" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_Fixture()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_Fixture(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="FixtureType" attrib="0" ptype="System.Type">
                <methods>
                  <method name="get_FixtureType()" attrib="2534" virtual="true" returntype="System.Type">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FullName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FullName()" attrib="2534" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_FullName(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="HasChildren" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasChildren()" attrib="3526" abstract="true" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Id" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Id()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Id(System.Int32)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="IsSuite" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsSuite()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2534" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_Name(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Parent" attrib="0" ptype="NUnit.Framework.Api.ITest">
                <methods>
                  <method name="get_Parent()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.ITest">
                    <parameters />
                  </method>
                  <method name="set_Parent(NUnit.Framework.Api.ITest)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Properties" attrib="0" ptype="NUnit.Framework.Api.IPropertyBag">
                <methods>
                  <method name="get_Properties()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.IPropertyBag">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="RunState" attrib="0" ptype="NUnit.Framework.Api.RunState">
                <methods>
                  <method name="get_RunState()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.RunState">
                    <parameters />
                  </method>
                  <method name="set_RunState(NUnit.Framework.Api.RunState)" attrib="2534" virtual="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.Api.RunState" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Seed" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Seed()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_Seed(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TestCaseCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_TestCaseCount()" attrib="2502" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TestType()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tests" attrib="0" ptype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITest]">
                <methods>
                  <method name="get_Tests()" attrib="3526" abstract="true" virtual="true" returntype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITest]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="XmlElementName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_XmlElementName()" attrib="3526" abstract="true" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddToXml(NUnit.Framework.Api.XmlNode, System.Boolean)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="parentNode" position="0" attrib="0" type="NUnit.Framework.Api.XmlNode" />
                  <parameter name="recursive" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="ApplyAttributesToTest(System.Reflection.ICustomAttributeProvider)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="provider" position="0" attrib="0" type="System.Reflection.ICustomAttributeProvider" />
                </parameters>
              </method>
              <method name="CompareTo(System.Object)" attrib="486" virtual="true" returntype="System.Int32">
                <parameters>
                  <parameter name="obj" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="CreateWorkItem(NUnit.Framework.Api.ITestFilter, NUnit.Framework.Internal.FinallyDelegate)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.WorkItems.WorkItem">
                <parameters>
                  <parameter name="childFilter" position="0" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                  <parameter name="finD" position="1" attrib="0" type="NUnit.Framework.Internal.FinallyDelegate" />
                </parameters>
              </method>
              <method name="MakeTestResult()" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters />
              </method>
              <method name="PopulateTestNode(NUnit.Framework.Api.XmlNode, System.Boolean)" attrib="132" returntype="System.Void">
                <parameters>
                  <parameter name="thisNode" position="0" attrib="0" type="NUnit.Framework.Api.XmlNode" />
                  <parameter name="recursive" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="ToXml(System.Boolean)" attrib="486" virtual="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="recursive" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestAssembly" type="class" base="NUnit.Framework.Internal.TestSuite" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITest" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
              <interface name="System.IComparable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Reflection.Assembly, System.String)" attrib="6278">
                <parameters>
                  <parameter name="assembly" position="0" attrib="0" type="System.Reflection.Assembly" />
                  <parameter name="path" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="TestType" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_TestType()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TestCaseResult" type="class" base="NUnit.Framework.Internal.TestResult" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestResult" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.TestMethod)" attrib="6278">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.TestMethod" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="FailCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FailCount()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InconclusiveCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InconclusiveCount()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PassCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_PassCount()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SkipCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SkipCount()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TestExecutionContext" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
            </interfaces>
            <fields>
              <field name="prior" attrib="6" fieldtype="NUnit.Framework.Internal.TestExecutionContext" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Internal.TestExecutionContext)" attrib="6278">
                <parameters>
                  <parameter name="other" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CurrentContext" attrib="0" ptype="NUnit.Framework.Internal.TestExecutionContext">
                <methods>
                  <method name="get_CurrentContext()" attrib="2198" static="true" returntype="NUnit.Framework.Internal.TestExecutionContext">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="CurrentCulture" attrib="0" ptype="System.Globalization.CultureInfo">
                <methods>
                  <method name="get_CurrentCulture()" attrib="2182" returntype="System.Globalization.CultureInfo">
                    <parameters />
                  </method>
                  <method name="set_CurrentCulture(System.Globalization.CultureInfo)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Globalization.CultureInfo" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CurrentResult" attrib="0" ptype="NUnit.Framework.Internal.TestResult">
                <methods>
                  <method name="get_CurrentResult()" attrib="2182" returntype="NUnit.Framework.Internal.TestResult">
                    <parameters />
                  </method>
                  <method name="set_CurrentResult(NUnit.Framework.Internal.TestResult)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.Internal.TestResult" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CurrentTest" attrib="0" ptype="NUnit.Framework.Internal.Test">
                <methods>
                  <method name="get_CurrentTest()" attrib="2182" returntype="NUnit.Framework.Internal.Test">
                    <parameters />
                  </method>
                  <method name="set_CurrentTest(NUnit.Framework.Internal.Test)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="CurrentUICulture" attrib="0" ptype="System.Globalization.CultureInfo">
                <methods>
                  <method name="get_CurrentUICulture()" attrib="2182" returntype="System.Globalization.CultureInfo">
                    <parameters />
                  </method>
                  <method name="set_CurrentUICulture(System.Globalization.CultureInfo)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Globalization.CultureInfo" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="RandomGenerator" attrib="0" ptype="NUnit.Framework.Internal.RandomGenerator">
                <methods>
                  <method name="get_RandomGenerator()" attrib="2182" returntype="NUnit.Framework.Internal.RandomGenerator">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StartTime" attrib="0" ptype="System.DateTime">
                <methods>
                  <method name="get_StartTime()" attrib="2182" returntype="System.DateTime">
                    <parameters />
                  </method>
                  <method name="set_StartTime(System.DateTime)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.DateTime" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="StopOnError" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_StopOnError()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_StopOnError(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TestCaseTimeout" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_TestCaseTimeout()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_TestCaseTimeout(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="TestObject" attrib="0" ptype="System.Object">
                <methods>
                  <method name="get_TestObject()" attrib="2182" returntype="System.Object">
                    <parameters />
                  </method>
                  <method name="set_TestObject(System.Object)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Object" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="WorkDirectory" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_WorkDirectory()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                  <method name="set_WorkDirectory(System.String)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.String" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="IncrementAssertCount()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="Restore()" attrib="134" returntype="NUnit.Framework.Internal.TestExecutionContext">
                <parameters />
              </method>
              <method name="Save()" attrib="134" returntype="NUnit.Framework.Internal.TestExecutionContext">
                <parameters />
              </method>
              <method name="UpdateContext()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TestFilter" type="class" base="System.Object" abstract="true" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestFilter" />
            </interfaces>
            <fields>
              <field name="Empty" attrib="22" fieldtype="NUnit.Framework.Internal.TestFilter" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="IsEmpty" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_IsEmpty()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Match(NUnit.Framework.Api.ITest)" attrib="1478" abstract="true" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
              <method name="MatchDescendant(NUnit.Framework.Api.ITest)" attrib="452" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
              <method name="MatchParent(NUnit.Framework.Api.ITest)" attrib="452" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
              <method name="Pass(NUnit.Framework.Api.ITest)" attrib="454" virtual="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestFixture" type="class" base="NUnit.Framework.Internal.TestSuite" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITest" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
              <interface name="System.IComparable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="fixtureType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.Object[])" attrib="6278">
                <parameters>
                  <parameter name="fixtureType" position="0" attrib="0" type="System.Type" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="TestFixtureBuilder" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <methods>
              <method name="BuildFrom(System.Object)" attrib="150" static="true" returntype="NUnit.Framework.Internal.Test">
                <parameters>
                  <parameter name="fixture" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="BuildFrom(System.Type)" attrib="150" static="true" returntype="NUnit.Framework.Internal.Test">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanBuildFrom(System.Type)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestListener" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestListener" />
            </interfaces>
            <properties>
              <property name="NULL" attrib="0" ptype="NUnit.Framework.Api.ITestListener">
                <methods>
                  <method name="get_NULL()" attrib="2198" static="true" returntype="NUnit.Framework.Api.ITestListener">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="TestFinished(NUnit.Framework.Api.ITestResult)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                </parameters>
              </method>
              <method name="TestOutput(NUnit.Framework.Api.TestOutput)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="testOutput" position="0" attrib="0" type="NUnit.Framework.Api.TestOutput" />
                </parameters>
              </method>
              <method name="TestStarted(NUnit.Framework.Api.ITest)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestMethod" type="class" base="NUnit.Framework.Internal.Test" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITest" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
              <interface name="System.IComparable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(System.Reflection.MethodInfo, NUnit.Framework.Internal.Test)" attrib="6278">
                <parameters>
                  <parameter name="method" position="0" attrib="0" type="System.Reflection.MethodInfo" />
                  <parameter name="parentSuite" position="1" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="CustomDecorators" attrib="0" ptype="System.Collections.Generic.IList`1[NUnit.Framework.Internal.Commands.ICommandDecorator]">
                <methods>
                  <method name="get_CustomDecorators()" attrib="2182" returntype="System.Collections.Generic.IList`1[NUnit.Framework.Internal.Commands.ICommandDecorator]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HasChildren" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasChildren()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Method" attrib="0" ptype="System.Reflection.MethodInfo">
                <methods>
                  <method name="get_Method()" attrib="2182" returntype="System.Reflection.MethodInfo">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tests" attrib="0" ptype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITest]">
                <methods>
                  <method name="get_Tests()" attrib="2246" virtual="true" is-override="true" returntype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITest]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="XmlElementName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_XmlElementName()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddToXml(NUnit.Framework.Api.XmlNode, System.Boolean)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="parentNode" position="0" attrib="0" type="NUnit.Framework.Api.XmlNode" />
                  <parameter name="recursive" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="CreateWorkItem(NUnit.Framework.Api.ITestFilter, NUnit.Framework.Internal.FinallyDelegate)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.WorkItems.WorkItem">
                <parameters>
                  <parameter name="childFilter" position="0" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                  <parameter name="fd" position="1" attrib="0" type="NUnit.Framework.Internal.FinallyDelegate" />
                </parameters>
              </method>
              <method name="MakeTestCommand()" attrib="454" virtual="true" returntype="NUnit.Framework.Internal.Commands.TestCommand">
                <parameters />
              </method>
              <method name="MakeTestResult()" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TestResult" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestResult" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
            </interfaces>
            <fields>
              <field name="ThreadCrashFail" attrib="6" fieldtype="System.Boolean" />
              <field name="assertCount" attrib="4" fieldtype="System.Int32">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="message" attrib="4" fieldtype="System.String">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="resultState" attrib="4" fieldtype="NUnit.Framework.Api.ResultState">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
              <field name="test" attrib="36" fieldtype="NUnit.Framework.Api.ITest">
                <attributes>
                  <attribute name="System.CLSCompliantAttribute">
                    <properties>
                      <property name="IsCompliant" value="False" />
                    </properties>
                  </attribute>
                </attributes>
              </field>
            </fields>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Api.ITest)" attrib="6278">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="AssertCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_AssertCount()" attrib="2534" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_AssertCount(System.Int32)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="Children" attrib="0" ptype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITestResult]">
                <methods>
                  <method name="get_Children()" attrib="2534" virtual="true" returntype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITestResult]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Duration" attrib="0" ptype="System.TimeSpan">
                <methods>
                  <method name="get_Duration()" attrib="2534" virtual="true" returntype="System.TimeSpan">
                    <parameters />
                  </method>
                  <method name="set_Duration(System.TimeSpan)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.TimeSpan" />
                    </parameters>
                  </method>
                </methods>
              </property>
              <property name="FailCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FailCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FullName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_FullName()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HasChildren" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasChildren()" attrib="2534" virtual="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InconclusiveCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InconclusiveCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Message" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Message()" attrib="2534" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Name" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Name()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PassCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_PassCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResultState" attrib="0" ptype="NUnit.Framework.Api.ResultState">
                <methods>
                  <method name="get_ResultState()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.ResultState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SkipCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SkipCount()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="StackTrace" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_StackTrace()" attrib="2502" virtual="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Test" attrib="0" ptype="NUnit.Framework.Api.ITest">
                <methods>
                  <method name="get_Test()" attrib="2534" virtual="true" returntype="NUnit.Framework.Api.ITest">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddResult(NUnit.Framework.Internal.TestResult)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Internal.TestResult" />
                </parameters>
              </method>
              <method name="AddToXml(NUnit.Framework.Api.XmlNode, System.Boolean)" attrib="454" virtual="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="parentNode" position="0" attrib="0" type="NUnit.Framework.Api.XmlNode" />
                  <parameter name="recursive" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="RecordException(System.Exception)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="ex" position="0" attrib="0" type="System.Exception" />
                </parameters>
              </method>
              <method name="SetResult(NUnit.Framework.Api.ResultState)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="resultState" position="0" attrib="0" type="NUnit.Framework.Api.ResultState" />
                </parameters>
              </method>
              <method name="SetResult(NUnit.Framework.Api.ResultState, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="resultState" position="0" attrib="0" type="NUnit.Framework.Api.ResultState" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="SetResult(NUnit.Framework.Api.ResultState, System.String, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="resultState" position="0" attrib="0" type="NUnit.Framework.Api.ResultState" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="stackTrace" position="2" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="ToXml(System.Boolean)" attrib="486" virtual="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="recursive" position="0" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestSuite" type="class" base="NUnit.Framework.Internal.Test" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITest" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
              <interface name="System.IComparable" />
            </interfaces>
            <fields>
              <field name="maintainTestOrder" attrib="4" fieldtype="System.Boolean" />
            </fields>
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type)" attrib="6278">
                <parameters>
                  <parameter name="fixtureType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String, System.String)" attrib="6278">
                <parameters>
                  <parameter name="parentSuiteName" position="0" attrib="0" type="System.String" />
                  <parameter name="name" position="1" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.Type, System.Object[])" attrib="6278">
                <parameters>
                  <parameter name="fixtureType" position="0" attrib="0" type="System.Type" />
                  <parameter name="arguments" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="HasChildren" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_HasChildren()" attrib="2246" virtual="true" is-override="true" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestCaseCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_TestCaseCount()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tests" attrib="0" ptype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITest]">
                <methods>
                  <method name="get_Tests()" attrib="2246" virtual="true" is-override="true" returntype="System.Collections.Generic.IList`1[NUnit.Framework.Api.ITest]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="XmlElementName" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_XmlElementName()" attrib="2246" virtual="true" is-override="true" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(NUnit.Framework.Internal.Test)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </method>
              <method name="AddToXml(NUnit.Framework.Api.XmlNode, System.Boolean)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Api.XmlNode">
                <parameters>
                  <parameter name="parentNode" position="0" attrib="0" type="NUnit.Framework.Api.XmlNode" />
                  <parameter name="recursive" position="1" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="CreateWorkItem(NUnit.Framework.Api.ITestFilter, NUnit.Framework.Internal.FinallyDelegate)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.WorkItems.WorkItem">
                <parameters>
                  <parameter name="childFilter" position="0" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                  <parameter name="finD" position="1" attrib="0" type="NUnit.Framework.Internal.FinallyDelegate" />
                </parameters>
              </method>
              <method name="GetOneTimeSetUpCommand()" attrib="454" virtual="true" returntype="NUnit.Framework.Internal.Commands.TestCommand">
                <parameters />
              </method>
              <method name="GetOneTimeTearDownCommand()" attrib="454" virtual="true" returntype="NUnit.Framework.Internal.Commands.TestCommand">
                <parameters />
              </method>
              <method name="MakeTestResult()" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters />
              </method>
              <method name="Sort()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="TestSuiteResult" type="class" base="NUnit.Framework.Internal.TestResult" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestResult" />
              <interface name="NUnit.Framework.Api.IXmlNodeBuilder" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.TestSuite)" attrib="6278">
                <parameters>
                  <parameter name="suite" position="0" attrib="0" type="NUnit.Framework.Internal.TestSuite" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="FailCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FailCount()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InconclusiveCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InconclusiveCount()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PassCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_PassCount()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SkipCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SkipCount()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="AddResult(NUnit.Framework.Internal.TestResult)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Internal.TestResult" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TextMessageWriter" type="class" base="NUnit.Framework.Constraints.MessageWriter" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <fields>
              <field name="Pfx_Actual" attrib="54" fieldtype="System.String" />
              <field name="Pfx_Expected" attrib="54" fieldtype="System.String" />
              <field name="PrefixLength" attrib="54" fieldtype="System.Int32" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String, System.Object[])" attrib="6278">
                <parameters>
                  <parameter name="userMessage" position="0" attrib="0" type="System.String" />
                  <parameter name="args" position="1" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="MaxLineLength" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_MaxLineLength()" attrib="2246" virtual="true" is-override="true" returntype="System.Int32">
                    <parameters />
                  </method>
                  <method name="set_MaxLineLength(System.Int32)" attrib="2246" virtual="true" is-override="true" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Int32" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="DisplayDifferences(NUnit.Framework.Constraints.Constraint)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="constraint" position="0" attrib="0" type="NUnit.Framework.Constraints.Constraint" />
                </parameters>
              </method>
              <method name="DisplayDifferences(System.Object, System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="DisplayDifferences(System.Object, System.Object, NUnit.Framework.Constraints.Tolerance)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                  <parameter name="actual" position="1" attrib="0" type="System.Object" />
                  <parameter name="tolerance" position="2" attrib="0" type="NUnit.Framework.Constraints.Tolerance" />
                </parameters>
              </method>
              <method name="DisplayStringDifferences(System.String, System.String, System.Int32, System.Boolean, System.Boolean)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.String" />
                  <parameter name="actual" position="1" attrib="0" type="System.String" />
                  <parameter name="mismatch" position="2" attrib="0" type="System.Int32" />
                  <parameter name="ignoreCase" position="3" attrib="0" type="System.Boolean" />
                  <parameter name="clipping" position="4" attrib="0" type="System.Boolean" />
                </parameters>
              </method>
              <method name="WriteActualValue(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="actual" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteCollectionElements(System.Collections.IEnumerable, System.Int32, System.Int32)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="collection" position="0" attrib="0" type="System.Collections.IEnumerable" />
                  <parameter name="start" position="1" attrib="0" type="System.Int32" />
                  <parameter name="max" position="2" attrib="0" type="System.Int32" />
                </parameters>
              </method>
              <method name="WriteConnector(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="connector" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteExpectedValue(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="expected" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
              <method name="WriteMessageLine(System.Int32, System.String, System.Object[])" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="level" position="0" attrib="0" type="System.Int32" />
                  <parameter name="message" position="1" attrib="0" type="System.String" />
                  <parameter name="args" position="2" attrib="0" type="System.Object[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
              <method name="WriteModifier(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="modifier" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WritePredicate(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="predicate" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteValue(System.Object)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="val" position="0" attrib="0" type="System.Object" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TypeHelper" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="BestCommonType(System.Type, System.Type)" attrib="150" static="true" returntype="System.Type">
                <parameters>
                  <parameter name="type1" position="0" attrib="0" type="System.Type" />
                  <parameter name="type2" position="1" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="CanDeduceTypeArgsFromArgs(System.Type, System.Object[], System.Type[]&amp;)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="arglist" position="1" attrib="0" type="System.Object[]" />
                  <parameter name="typeArgsOut" position="2" attrib="0" type="System.Type[]" direction="ref" />
                </parameters>
              </method>
              <method name="ConvertArgumentList(System.Object[], System.Reflection.ParameterInfo[])" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="arglist" position="0" attrib="0" type="System.Object[]" />
                  <parameter name="parameters" position="1" attrib="0" type="System.Reflection.ParameterInfo[]" />
                </parameters>
              </method>
              <method name="GetDisplayName(System.Type)" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetDisplayName(System.Type, System.Object[])" attrib="150" static="true" returntype="System.String">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="arglist" position="1" attrib="0" type="System.Object[]" />
                </parameters>
              </method>
              <method name="GetEnumNames(System.Type)" attrib="150" static="true" returntype="System.String[]">
                <parameters>
                  <parameter name="enumType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="GetEnumValues(System.Type)" attrib="150" static="true" returntype="System.Array">
                <parameters>
                  <parameter name="enumType" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="IsNumeric(System.Type)" attrib="150" static="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                </parameters>
              </method>
              <method name="MakeGenericType(System.Type, System.Type[])" attrib="150" static="true" returntype="System.Type">
                <parameters>
                  <parameter name="type" position="0" attrib="0" type="System.Type" />
                  <parameter name="typeArgs" position="1" attrib="0" type="System.Type[]" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit.Framework.Internal.Commands">
        <classes>
          <class name="CommandDecoratorList" type="class" base="System.Collections.Generic.List`1[NUnit.Framework.Internal.Commands.ICommandDecorator]" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.Collections.Generic.ICollection`1[T]" />
              <interface name="System.Collections.Generic.IEnumerable`1[T]" />
              <interface name="System.Collections.Generic.IList`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyCollection`1[T]" />
              <interface name="System.Collections.Generic.IReadOnlyList`1[T]" />
              <interface name="System.Collections.ICollection" />
              <interface name="System.Collections.IEnumerable" />
              <interface name="System.Collections.IList" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="OrderByStage()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="CommandStage" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="AboveSetUpTearDown" attrib="32854" fieldtype="NUnit.Framework.Internal.Commands.CommandStage" value="3" />
              <field name="BelowSetUpTearDown" attrib="32854" fieldtype="NUnit.Framework.Internal.Commands.CommandStage" value="1" />
              <field name="Default" attrib="32854" fieldtype="NUnit.Framework.Internal.Commands.CommandStage" value="0" />
              <field name="SetUpTearDown" attrib="32854" fieldtype="NUnit.Framework.Internal.Commands.CommandStage" value="2" />
            </fields>
          </class>
          <class name="DelegatingTestCommand" type="class" base="NUnit.Framework.Internal.Commands.TestCommand" abstract="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="innerCommand" attrib="4" fieldtype="NUnit.Framework.Internal.Commands.TestCommand" />
            </fields>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.Commands.TestCommand)" attrib="6276">
                <parameters>
                  <parameter name="innerCommand" position="0" attrib="0" type="NUnit.Framework.Internal.Commands.TestCommand" />
                </parameters>
              </constructor>
            </constructors>
          </class>
          <class name="ExpectedExceptionCommand" type="class" base="NUnit.Framework.Internal.Commands.DelegatingTestCommand" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.Commands.TestCommand, NUnit.Framework.Api.ExpectedExceptionData)" attrib="6278">
                <parameters>
                  <parameter name="innerCommand" position="0" attrib="0" type="NUnit.Framework.Internal.Commands.TestCommand" />
                  <parameter name="exceptionData" position="1" attrib="0" type="NUnit.Framework.Api.ExpectedExceptionData" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
              <method name="ProcessException(System.Exception, NUnit.Framework.Internal.TestExecutionContext)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="exception" position="0" attrib="0" type="System.Exception" />
                  <parameter name="context" position="1" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
              <method name="ProcessNoException(NUnit.Framework.Internal.TestExecutionContext)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ICommandDecorator" type="interface" abstract="true" charset="Ansi" layout="Auto">
            <properties>
              <property name="Priority" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_Priority()" attrib="3526" abstract="true" virtual="true" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Stage" attrib="0" ptype="NUnit.Framework.Internal.Commands.CommandStage">
                <methods>
                  <method name="get_Stage()" attrib="3526" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.Commands.CommandStage">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Decorate(NUnit.Framework.Internal.Commands.TestCommand)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.Commands.TestCommand">
                <parameters>
                  <parameter name="command" position="0" attrib="0" type="NUnit.Framework.Internal.Commands.TestCommand" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="MaxTimeCommand" type="class" base="NUnit.Framework.Internal.Commands.DelegatingTestCommand" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.Commands.TestCommand)" attrib="6278">
                <parameters>
                  <parameter name="innerCommand" position="0" attrib="0" type="NUnit.Framework.Internal.Commands.TestCommand" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OneTimeSetUpCommand" type="class" base="NUnit.Framework.Internal.Commands.TestCommand" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.TestSuite)" attrib="6278">
                <parameters>
                  <parameter name="suite" position="0" attrib="0" type="NUnit.Framework.Internal.TestSuite" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OneTimeTearDownCommand" type="class" base="NUnit.Framework.Internal.Commands.TestCommand" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.TestSuite)" attrib="6278">
                <parameters>
                  <parameter name="suite" position="0" attrib="0" type="NUnit.Framework.Internal.TestSuite" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SetUpTearDownCommand" type="class" base="NUnit.Framework.Internal.Commands.DelegatingTestCommand" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.Commands.TestCommand)" attrib="6278">
                <parameters>
                  <parameter name="innerCommand" position="0" attrib="0" type="NUnit.Framework.Internal.Commands.TestCommand" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SetUpTearDownDecorator" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Internal.Commands.ICommandDecorator" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
          </class>
          <class name="SkipCommand" type="class" base="NUnit.Framework.Internal.Commands.TestCommand" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.Test)" attrib="6278">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestCommand" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.Test)" attrib="6278">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Test" attrib="0" ptype="NUnit.Framework.Internal.Test">
                <methods>
                  <method name="get_Test()" attrib="2182" returntype="NUnit.Framework.Internal.Test">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="1478" abstract="true" virtual="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TestMethodCommand" type="class" base="NUnit.Framework.Internal.Commands.TestCommand" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.TestMethod)" attrib="6278">
                <parameters>
                  <parameter name="testMethod" position="0" attrib="0" type="NUnit.Framework.Internal.TestMethod" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="TheoryResultCommand" type="class" base="NUnit.Framework.Internal.Commands.DelegatingTestCommand" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.Commands.TestCommand)" attrib="6278">
                <parameters>
                  <parameter name="command" position="0" attrib="0" type="NUnit.Framework.Internal.Commands.TestCommand" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="198" virtual="true" is-override="true" returntype="NUnit.Framework.Internal.TestResult">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit.Framework.Internal.Filters">
        <classes>
          <class name="AndFilter" type="class" base="NUnit.Framework.Internal.TestFilter" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestFilter" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Api.ITestFilter[])" attrib="6278">
                <parameters>
                  <parameter name="filters" position="0" attrib="0" type="NUnit.Framework.Api.ITestFilter[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Add(NUnit.Framework.Api.ITestFilter)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="filter" position="0" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                </parameters>
              </method>
              <method name="Match(NUnit.Framework.Api.ITest)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
              <method name="Pass(NUnit.Framework.Api.ITest)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="CategoryExpression" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="text" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Filter" attrib="0" ptype="NUnit.Framework.Internal.TestFilter">
                <methods>
                  <method name="get_Filter()" attrib="2182" returntype="NUnit.Framework.Internal.TestFilter">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="CategoryFilter" type="class" base="NUnit.Framework.Internal.TestFilter" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestFilter" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String[])" attrib="6278">
                <parameters>
                  <parameter name="names" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="AddCategory(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Match(NUnit.Framework.Api.ITest)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
              <method name="ToString()" attrib="198" virtual="true" is-override="true" returntype="System.String">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="NotFilter" type="class" base="NUnit.Framework.Internal.TestFilter" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestFilter" />
            </interfaces>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Api.ITestFilter)" attrib="6278">
                <parameters>
                  <parameter name="baseFilter" position="0" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="BaseFilter" attrib="0" ptype="NUnit.Framework.Api.ITestFilter">
                <methods>
                  <method name="get_BaseFilter()" attrib="2182" returntype="NUnit.Framework.Api.ITestFilter">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TopLevel" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_TopLevel()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                  <method name="set_TopLevel(System.Boolean)" attrib="2182" returntype="System.Void">
                    <parameters>
                      <parameter name="value" position="0" attrib="0" type="System.Boolean" />
                    </parameters>
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Match(NUnit.Framework.Api.ITest)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
              <method name="MatchDescendant(NUnit.Framework.Api.ITest)" attrib="196" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OrFilter" type="class" base="NUnit.Framework.Internal.TestFilter" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestFilter" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Api.ITestFilter[])" attrib="6278">
                <parameters>
                  <parameter name="filters" position="0" attrib="0" type="NUnit.Framework.Api.ITestFilter[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Filters" attrib="0" ptype="NUnit.Framework.Api.ITestFilter[]">
                <methods>
                  <method name="get_Filters()" attrib="2182" returntype="NUnit.Framework.Api.ITestFilter[]">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Add(NUnit.Framework.Api.ITestFilter)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="filter" position="0" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                </parameters>
              </method>
              <method name="Match(NUnit.Framework.Api.ITest)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
              <method name="Pass(NUnit.Framework.Api.ITest)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="SimpleCategoryExpression" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="text" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Filter" attrib="0" ptype="NUnit.Framework.Internal.TestFilter">
                <methods>
                  <method name="get_Filter()" attrib="2182" returntype="NUnit.Framework.Internal.TestFilter">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="SimpleNameFilter" type="class" base="NUnit.Framework.Internal.TestFilter" serializable="true" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestFilter" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="nameToAdd" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.String[])" attrib="6278">
                <parameters>
                  <parameter name="namesToAdd" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Add(System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="name" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="Match(NUnit.Framework.Api.ITest)" attrib="198" virtual="true" is-override="true" returntype="System.Boolean">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnit.Framework.Internal.WorkItems">
        <classes>
          <class name="CompositeWorkItem" type="class" base="NUnit.Framework.Internal.WorkItems.WorkItem" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.TestSuite, NUnit.Framework.Api.ITestFilter, NUnit.Framework.Internal.FinallyDelegate)" attrib="6278">
                <parameters>
                  <parameter name="suite" position="0" attrib="0" type="NUnit.Framework.Internal.TestSuite" />
                  <parameter name="childFilter" position="1" attrib="0" type="NUnit.Framework.Api.ITestFilter" />
                  <parameter name="fd" position="2" attrib="0" type="NUnit.Framework.Internal.FinallyDelegate" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="PerformWork()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="SimpleWorkItem" type="class" base="NUnit.Framework.Internal.WorkItems.WorkItem" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.Commands.TestCommand, NUnit.Framework.Internal.FinallyDelegate)" attrib="6278">
                <parameters>
                  <parameter name="command" position="0" attrib="0" type="NUnit.Framework.Internal.Commands.TestCommand" />
                  <parameter name="fd" position="1" attrib="0" type="NUnit.Framework.Internal.FinallyDelegate" />
                </parameters>
              </constructor>
              <constructor name=".ctor(NUnit.Framework.Internal.TestMethod, NUnit.Framework.Internal.FinallyDelegate)" attrib="6278">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.TestMethod" />
                  <parameter name="fd" position="1" attrib="0" type="NUnit.Framework.Internal.FinallyDelegate" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="PerformWork()" attrib="196" virtual="true" is-override="true" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="WorkItem" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <fields>
              <field name="finD" attrib="4" fieldtype="NUnit.Framework.Internal.FinallyDelegate" />
              <field name="testResult" attrib="4" fieldtype="NUnit.Framework.Internal.TestResult" />
            </fields>
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Internal.Test, NUnit.Framework.Internal.FinallyDelegate)" attrib="6278">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Internal.Test" />
                  <parameter name="finallyDelegate" position="1" attrib="0" type="NUnit.Framework.Internal.FinallyDelegate" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Context" attrib="0" ptype="NUnit.Framework.Internal.TestExecutionContext">
                <methods>
                  <method name="get_Context()" attrib="2180" returntype="NUnit.Framework.Internal.TestExecutionContext">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Result" attrib="0" ptype="NUnit.Framework.Internal.TestResult">
                <methods>
                  <method name="get_Result()" attrib="2182" returntype="NUnit.Framework.Internal.TestResult">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="State" attrib="0" ptype="NUnit.Framework.Internal.WorkItems.WorkItemState">
                <methods>
                  <method name="get_State()" attrib="2182" returntype="NUnit.Framework.Internal.WorkItems.WorkItemState">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Test" attrib="0" ptype="NUnit.Framework.Internal.Test">
                <methods>
                  <method name="get_Test()" attrib="2182" returntype="NUnit.Framework.Internal.Test">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <events>
              <event name="Completed" attrib="0" eventtype="System.EventHandler" />
            </events>
            <methods>
              <method name="Execute(NUnit.Framework.Internal.TestExecutionContext)" attrib="454" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="context" position="0" attrib="0" type="NUnit.Framework.Internal.TestExecutionContext" />
                </parameters>
              </method>
              <method name="PerformWork()" attrib="1476" abstract="true" virtual="true" returntype="System.Void">
                <parameters />
              </method>
              <method name="WorkItemComplete()" attrib="132" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="WorkItemState" type="enum" base="System.Enum" sealed="true" serializable="true" charset="Ansi" layout="Auto" enumtype="System.Int32">
            <interfaces>
              <interface name="System.IComparable" />
              <interface name="System.IConvertible" />
              <interface name="System.IFormattable" />
            </interfaces>
            <fields>
              <field name="Complete" attrib="32854" fieldtype="NUnit.Framework.Internal.WorkItems.WorkItemState" value="2" />
              <field name="Ready" attrib="32854" fieldtype="NUnit.Framework.Internal.WorkItems.WorkItemState" value="0" />
              <field name="Waiting" attrib="32854" fieldtype="NUnit.Framework.Internal.WorkItems.WorkItemState" value="1" />
            </fields>
          </class>
        </classes>
      </namespace>
      <namespace name="NUnitLite.Runner">
        <classes>
          <class name="CommandLineOptions" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.String)" attrib="6278">
                <parameters>
                  <parameter name="optionChars" position="0" attrib="0" type="System.String" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Error" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Error()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ErrorMessage" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ErrorMessage()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Exclude" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Exclude()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Explore" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Explore()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ExploreFile" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ExploreFile()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Full" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Full()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="HelpText" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_HelpText()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Include" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_Include()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InitialSeed" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InitialSeed()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="LabelTestsInOutput" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_LabelTestsInOutput()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NoHeader" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_NoHeader()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="OutFile" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_OutFile()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Parameters" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_Parameters()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResultFile" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ResultFile()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ResultFormat" attrib="0" ptype="System.String">
                <methods>
                  <method name="get_ResultFormat()" attrib="2182" returntype="System.String">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="ShowHelp" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_ShowHelp()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_TestCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Tests" attrib="0" ptype="System.String[]">
                <methods>
                  <method name="get_Tests()" attrib="2182" returntype="System.String[]">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Wait" attrib="0" ptype="System.Boolean">
                <methods>
                  <method name="get_Wait()" attrib="2182" returntype="System.Boolean">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Parse(System.String[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.String[]">
                    <attributes>
                      <attribute name="System.ParamArrayAttribute" />
                    </attributes>
                  </parameter>
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ConsoleWriter" type="class" base="System.IO.TextWriter" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Encoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_Encoding()" attrib="2246" virtual="true" is-override="true" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Out" attrib="0" ptype="System.IO.TextWriter">
                <methods>
                  <method name="get_Out()" attrib="2198" static="true" returntype="System.IO.TextWriter">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Write(System.Char)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="Write(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="DebugWriter" type="class" base="System.IO.TextWriter" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="System.IDisposable" />
            </interfaces>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
            </constructors>
            <properties>
              <property name="Encoding" attrib="0" ptype="System.Text.Encoding">
                <methods>
                  <method name="get_Encoding()" attrib="2246" virtual="true" is-override="true" returntype="System.Text.Encoding">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="Out" attrib="0" ptype="System.IO.TextWriter">
                <methods>
                  <method name="get_Out()" attrib="2198" static="true" returntype="System.IO.TextWriter">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="Write(System.Char)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.Char" />
                </parameters>
              </method>
              <method name="Write(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
              <method name="WriteLine(System.String)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="value" position="0" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NUnit2XmlOutputWriter" type="class" base="NUnitLite.Runner.OutputWriter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.DateTime)" attrib="6278">
                <parameters>
                  <parameter name="startTime" position="0" attrib="0" type="System.DateTime" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="WriteResultFile(NUnit.Framework.Api.ITestResult, System.IO.TextWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                  <parameter name="writer" position="1" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="NUnit3XmlOutputWriter" type="class" base="NUnitLite.Runner.OutputWriter" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(System.DateTime)" attrib="6278">
                <parameters>
                  <parameter name="runStartTime" position="0" attrib="0" type="System.DateTime" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="WriteResultFile(NUnit.Framework.Api.ITestResult, System.IO.TextWriter)" attrib="198" virtual="true" is-override="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                  <parameter name="writer" position="1" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="OutputWriter" type="class" base="System.Object" abstract="true" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor()" attrib="6276">
                <parameters />
              </constructor>
            </constructors>
            <methods>
              <method name="WriteResultFile(NUnit.Framework.Api.ITestResult, System.IO.TextWriter)" attrib="1478" abstract="true" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                  <parameter name="writer" position="1" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
              <method name="WriteResultFile(NUnit.Framework.Api.ITestResult, System.String)" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                  <parameter name="outputPath" position="1" attrib="0" type="System.String" />
                </parameters>
              </method>
            </methods>
          </class>
          <class name="ResultReporter" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Api.ITestResult, System.IO.TextWriter)" attrib="6278">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                  <parameter name="writer" position="1" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="Summary" attrib="0" ptype="NUnitLite.Runner.ResultSummary">
                <methods>
                  <method name="get_Summary()" attrib="2182" returntype="NUnitLite.Runner.ResultSummary">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
            <methods>
              <method name="PrintErrorReport()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="PrintFullReport()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="PrintNotRunReport()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="PrintSummaryReport()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
              <method name="ReportResults()" attrib="134" returntype="System.Void">
                <parameters />
              </method>
            </methods>
          </class>
          <class name="ResultSummary" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <constructors>
              <constructor name=".ctor(NUnit.Framework.Api.ITestResult)" attrib="6278">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                </parameters>
              </constructor>
            </constructors>
            <properties>
              <property name="ErrorCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_ErrorCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="FailureCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_FailureCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="IgnoreCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_IgnoreCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InconclusiveCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InconclusiveCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="InvalidCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_InvalidCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="NotRunCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_NotRunCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="PassCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_PassCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="SkipCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_SkipCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
              <property name="TestCount" attrib="0" ptype="System.Int32">
                <methods>
                  <method name="get_TestCount()" attrib="2182" returntype="System.Int32">
                    <parameters />
                  </method>
                </methods>
              </property>
            </properties>
          </class>
          <class name="TextUI" type="class" base="System.Object" charset="Ansi" layout="Auto">
            <interfaces>
              <interface name="NUnit.Framework.Api.ITestListener" />
            </interfaces>
            <fields>
              <field name="Failure" attrib="6" fieldtype="System.Boolean" />
            </fields>
            <constructors>
              <constructor name=".ctor()" attrib="6278">
                <parameters />
              </constructor>
              <constructor name=".ctor(System.IO.TextWriter)" attrib="6278">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </constructor>
              <constructor name=".ctor(System.IO.TextWriter, NUnit.Framework.Api.ITestListener)" attrib="6278">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                  <parameter name="listener" position="1" attrib="0" type="NUnit.Framework.Api.ITestListener" />
                </parameters>
              </constructor>
            </constructors>
            <methods>
              <method name="Execute(System.String[])" attrib="134" returntype="System.Void">
                <parameters>
                  <parameter name="args" position="0" attrib="0" type="System.String[]" />
                </parameters>
              </method>
              <method name="TestFinished(NUnit.Framework.Api.ITestResult)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="result" position="0" attrib="0" type="NUnit.Framework.Api.ITestResult" />
                </parameters>
              </method>
              <method name="TestOutput(NUnit.Framework.Api.TestOutput)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="testOutput" position="0" attrib="0" type="NUnit.Framework.Api.TestOutput" />
                </parameters>
              </method>
              <method name="TestStarted(NUnit.Framework.Api.ITest)" attrib="486" virtual="true" returntype="System.Void">
                <parameters>
                  <parameter name="test" position="0" attrib="0" type="NUnit.Framework.Api.ITest" />
                </parameters>
              </method>
              <method name="WriteHeader(System.IO.TextWriter)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
              <method name="WriteRuntimeEnvironment(System.IO.TextWriter)" attrib="150" static="true" returntype="System.Void">
                <parameters>
                  <parameter name="writer" position="0" attrib="0" type="System.IO.TextWriter" />
                </parameters>
              </method>
            </methods>
          </class>
        </classes>
      </namespace>
    </namespaces>
  </assembly>
</assemblies>